// This file has been generated by Py++.

#include "boost/python.hpp"
#include "python_CEGUI.h"
#include "FontDim.pypp.hpp"

namespace bp = boost::python;

void register_FontDim_class(){

    { //::CEGUI::FontDim
        typedef bp::class_< CEGUI::FontDim, bp::bases< CEGUI::BaseDim > > FontDim_exposer_t;
        FontDim_exposer_t FontDim_exposer = FontDim_exposer_t( "FontDim", "*!\n\
        \n\
            Dimension type that represents some metric of a Font.  Implements BaseDim interface.\n\
        *\n", bp::init< CEGUI::String const &, CEGUI::String const &, CEGUI::String const &, CEGUI::FontMetricType, bp::optional< float > >(( bp::arg("name"), bp::arg("font"), bp::arg("text"), bp::arg("metric"), bp::arg("padding")=0 ), "*!\n\
                \n\
                    Constructor.\n\
        \n\
                @param name\n\
                    String holding the name suffix of the window to be accessed to obtain the font\n\
                    and  or text strings to be used when these items are not explicitly given.\n\
        \n\
                @param font\n\
                    String holding the name of the font to use for this dimension.  If the string is\n\
                    empty, the font assigned to the window passed to getValue will be used.\n\
        \n\
                @param text\n\
                    String holding the text to be measured for horizontal extent.  If this is empty,\n\
                    the text from the window passed to getValue will be used.\n\
        \n\
                @param metric\n\
                    One of the FontMetricType values indicating what we should represent.\n\
        \n\
                @param padding\n\
                    constant pixel padding value to be added.\n\
                *\n") );
        bp::scope FontDim_scope( FontDim_exposer );
    }

}
