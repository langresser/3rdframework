// This file has been generated by Py++.

#include "boost/python.hpp"
#include "python_CEGUI.h"
#include "PropertyDim.pypp.hpp"

namespace bp = boost::python;

void register_PropertyDim_class(){

    { //::CEGUI::PropertyDim
        typedef bp::class_< CEGUI::PropertyDim, bp::bases< CEGUI::BaseDim > > PropertyDim_exposer_t;
        PropertyDim_exposer_t PropertyDim_exposer = PropertyDim_exposer_t( "PropertyDim", "*!\n\
        \n\
            Dimension type that represents the value of a Window property.\n\
            Implements BaseDim interface.\n\
        *\n", bp::init< CEGUI::String const &, CEGUI::String const &, CEGUI::DimensionType >(( bp::arg("name"), bp::arg("property"), bp::arg("type") ), "*!\n\
                \n\
                    Constructor.\n\
        \n\
                @param name\n\
                    String holding the name suffix of the window on which the property\n\
                    is to be accessed.\n\
        \n\
                @param property\n\
                    String object holding the name of the property this PropertyDim\n\
                    represents the value of.  The property named should represent either\n\
                    a UDim value or a simple float value - dependning upon what  type\n\
                    is specified as.\n\
        \n\
                @param type\n\
                    DimensionType value indicating what dimension named property\n\
                    represents.  The possible DimensionType values are as follows:\n\
                    - DT_INVALID the property should represent a simple float value.\n\
                    - DT_WIDTH the property should represent a UDim value where the\n\
                    scale is relative to the targetted Window's width.\n\
                    - DT_HEIGHT the property should represent a UDim value where the\n\
                    scale is relative to the targetted Window's height.\n\
                    - All other values will cause an InvalidRequestException exception\n\
                    to be thrown.\n\
                *\n") );
        bp::scope PropertyDim_scope( PropertyDim_exposer );
    }

}
