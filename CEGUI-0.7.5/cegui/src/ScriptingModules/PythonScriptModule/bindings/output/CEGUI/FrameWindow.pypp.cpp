// This file has been generated by Py++.

#include "boost/python.hpp"
#include "python_CEGUI.h"
#include "FrameWindow.pypp.hpp"

namespace bp = boost::python;

struct FrameWindow_wrapper : CEGUI::FrameWindow, bp::wrapper< CEGUI::FrameWindow > {

    FrameWindow_wrapper(::CEGUI::String const & type, ::CEGUI::String const & name )
    : CEGUI::FrameWindow( boost::ref(type), boost::ref(name) )
      , bp::wrapper< CEGUI::FrameWindow >(){
        // constructor
    
    }

    virtual void initialiseComponents(  ) {
        if( bp::override func_initialiseComponents = this->get_override( "initialiseComponents" ) )
            func_initialiseComponents(  );
        else{
            this->CEGUI::FrameWindow::initialiseComponents(  );
        }
    }
    
    void default_initialiseComponents(  ) {
        CEGUI::FrameWindow::initialiseComponents( );
    }

    virtual bool isHit( ::CEGUI::Point const & position, bool const arg1 ) const  {
        if( bp::override func_isHit = this->get_override( "isHit" ) )
            return func_isHit( boost::ref(position), arg1 );
        else{
            return this->CEGUI::FrameWindow::isHit( boost::ref(position), arg1 );
        }
    }
    
    bool default_isHit( ::CEGUI::Point const & position, bool const arg1 ) const  {
        return CEGUI::FrameWindow::isHit( boost::ref(position), arg1 );
    }

    virtual void beginInitialisation(  ) {
        if( bp::override func_beginInitialisation = this->get_override( "beginInitialisation" ) )
            func_beginInitialisation(  );
        else{
            this->CEGUI::Window::beginInitialisation(  );
        }
    }
    
    void default_beginInitialisation(  ) {
        CEGUI::Window::beginInitialisation( );
    }

    virtual void cloneChildWidgetsTo( ::CEGUI::Window & target ) const  {
        if( bp::override func_cloneChildWidgetsTo = this->get_override( "cloneChildWidgetsTo" ) )
            func_cloneChildWidgetsTo( boost::ref(target) );
        else{
            this->CEGUI::Window::cloneChildWidgetsTo( boost::ref(target) );
        }
    }
    
    void default_cloneChildWidgetsTo( ::CEGUI::Window & target ) const  {
        CEGUI::Window::cloneChildWidgetsTo( boost::ref(target) );
    }

    virtual void clonePropertiesTo( ::CEGUI::Window & target ) const  {
        if( bp::override func_clonePropertiesTo = this->get_override( "clonePropertiesTo" ) )
            func_clonePropertiesTo( boost::ref(target) );
        else{
            this->CEGUI::Window::clonePropertiesTo( boost::ref(target) );
        }
    }
    
    void default_clonePropertiesTo( ::CEGUI::Window & target ) const  {
        CEGUI::Window::clonePropertiesTo( boost::ref(target) );
    }

    virtual void destroy(  ) {
        if( bp::override func_destroy = this->get_override( "destroy" ) )
            func_destroy(  );
        else{
            this->CEGUI::Window::destroy(  );
        }
    }
    
    void default_destroy(  ) {
        CEGUI::Window::destroy( );
    }

    virtual void endInitialisation(  ) {
        if( bp::override func_endInitialisation = this->get_override( "endInitialisation" ) )
            func_endInitialisation(  );
        else{
            this->CEGUI::Window::endInitialisation(  );
        }
    }
    
    void default_endInitialisation(  ) {
        CEGUI::Window::endInitialisation( );
    }

    virtual void fireEvent( ::CEGUI::String const & name, ::CEGUI::EventArgs & args, ::CEGUI::String const & eventNamespace="" ) {
        if( bp::override func_fireEvent = this->get_override( "fireEvent" ) )
            func_fireEvent( boost::ref(name), boost::ref(args), boost::ref(eventNamespace) );
        else{
            this->CEGUI::EventSet::fireEvent( boost::ref(name), boost::ref(args), boost::ref(eventNamespace) );
        }
    }
    
    void default_fireEvent( ::CEGUI::String const & name, ::CEGUI::EventArgs & args, ::CEGUI::String const & eventNamespace="" ) {
        CEGUI::EventSet::fireEvent( boost::ref(name), boost::ref(args), boost::ref(eventNamespace) );
    }

    virtual void getRenderingContext_impl( ::CEGUI::RenderingContext & ctx ) const  {
        if( bp::override func_getRenderingContext_impl = this->get_override( "getRenderingContext_impl" ) )
            func_getRenderingContext_impl( boost::ref(ctx) );
        else{
            this->CEGUI::Window::getRenderingContext_impl( boost::ref(ctx) );
        }
    }
    
    void default_getRenderingContext_impl( ::CEGUI::RenderingContext & ctx ) const  {
        CEGUI::Window::getRenderingContext_impl( boost::ref(ctx) );
    }

    virtual ::CEGUI::Rect getUnclippedInnerRect_impl(  ) const  {
        if( bp::override func_getUnclippedInnerRect_impl = this->get_override( "getUnclippedInnerRect_impl" ) )
            return func_getUnclippedInnerRect_impl(  );
        else{
            return this->CEGUI::Window::getUnclippedInnerRect_impl(  );
        }
    }
    
    ::CEGUI::Rect default_getUnclippedInnerRect_impl(  ) const  {
        return CEGUI::Window::getUnclippedInnerRect_impl( );
    }

    virtual void performChildWindowLayout(  ) {
        if( bp::override func_performChildWindowLayout = this->get_override( "performChildWindowLayout" ) )
            func_performChildWindowLayout(  );
        else{
            this->CEGUI::Window::performChildWindowLayout(  );
        }
    }
    
    void default_performChildWindowLayout(  ) {
        CEGUI::Window::performChildWindowLayout( );
    }

    virtual void setLookNFeel( ::CEGUI::String const & look ) {
        if( bp::override func_setLookNFeel = this->get_override( "setLookNFeel" ) )
            func_setLookNFeel( boost::ref(look) );
        else{
            this->CEGUI::Window::setLookNFeel( boost::ref(look) );
        }
    }
    
    void default_setLookNFeel( ::CEGUI::String const & look ) {
        CEGUI::Window::setLookNFeel( boost::ref(look) );
    }

    virtual void setMargin( ::CEGUI::UBox const & margin ) {
        if( bp::override func_setMargin = this->get_override( "setMargin" ) )
            func_setMargin( boost::ref(margin) );
        else{
            this->CEGUI::Window::setMargin( boost::ref(margin) );
        }
    }
    
    void default_setMargin( ::CEGUI::UBox const & margin ) {
        CEGUI::Window::setMargin( boost::ref(margin) );
    }

    virtual ::CEGUI::RefCounted< CEGUI::BoundSlot > subscribeScriptedEvent( ::CEGUI::String const & name, ::CEGUI::String const & subscriber_name ) {
        if( bp::override func_subscribeScriptedEvent = this->get_override( "subscribeScriptedEvent" ) )
            return func_subscribeScriptedEvent( boost::ref(name), boost::ref(subscriber_name) );
        else{
            return this->CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), boost::ref(subscriber_name) );
        }
    }
    
    ::CEGUI::RefCounted< CEGUI::BoundSlot > default_subscribeScriptedEvent( ::CEGUI::String const & name, ::CEGUI::String const & subscriber_name ) {
        return CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), boost::ref(subscriber_name) );
    }

    virtual ::CEGUI::RefCounted< CEGUI::BoundSlot > subscribeScriptedEvent( ::CEGUI::String const & name, unsigned int group, ::CEGUI::String const & subscriber_name ) {
        if( bp::override func_subscribeScriptedEvent = this->get_override( "subscribeScriptedEvent" ) )
            return func_subscribeScriptedEvent( boost::ref(name), group, boost::ref(subscriber_name) );
        else{
            return this->CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), group, boost::ref(subscriber_name) );
        }
    }
    
    ::CEGUI::RefCounted< CEGUI::BoundSlot > default_subscribeScriptedEvent( ::CEGUI::String const & name, unsigned int group, ::CEGUI::String const & subscriber_name ) {
        return CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), group, boost::ref(subscriber_name) );
    }

    virtual void update( float elapsed ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update( elapsed );
        else{
            this->CEGUI::Window::update( elapsed );
        }
    }
    
    void default_update( float elapsed ) {
        CEGUI::Window::update( elapsed );
    }

    virtual void writeXMLToStream( ::CEGUI::XMLSerializer & xml_stream ) const  {
        if( bp::override func_writeXMLToStream = this->get_override( "writeXMLToStream" ) )
            func_writeXMLToStream( boost::ref(xml_stream) );
        else{
            this->CEGUI::Window::writeXMLToStream( boost::ref(xml_stream) );
        }
    }
    
    void default_writeXMLToStream( ::CEGUI::XMLSerializer & xml_stream ) const  {
        CEGUI::Window::writeXMLToStream( boost::ref(xml_stream) );
    }

};

void register_FrameWindow_class(){

    { //::CEGUI::FrameWindow
        typedef bp::class_< FrameWindow_wrapper, bp::bases< CEGUI::Window >, boost::noncopyable > FrameWindow_exposer_t;
        FrameWindow_exposer_t FrameWindow_exposer = FrameWindow_exposer_t( "FrameWindow", "*!\n\
        \n\
           Abstract base class for a movable, sizable, window with a title-bar and a frame.\n\
        *\n", bp::init< CEGUI::String const &, CEGUI::String const & >(( bp::arg("type"), bp::arg("name") ), "*************************************************************************\n\
           Construction  Destruction\n\
        *************************************************************************\n\
        *!\n\
        \n\
           Constructor for FrameWindow objects.\n\
        *\n") );
        bp::scope FrameWindow_scope( FrameWindow_exposer );
        bp::enum_< CEGUI::FrameWindow::SizingLocation>("SizingLocation")
            .value("SizingNone", CEGUI::FrameWindow::SizingNone)
            .value("SizingTopLeft", CEGUI::FrameWindow::SizingTopLeft)
            .value("SizingTopRight", CEGUI::FrameWindow::SizingTopRight)
            .value("SizingBottomLeft", CEGUI::FrameWindow::SizingBottomLeft)
            .value("SizingBottomRight", CEGUI::FrameWindow::SizingBottomRight)
            .value("SizingTop", CEGUI::FrameWindow::SizingTop)
            .value("SizingLeft", CEGUI::FrameWindow::SizingLeft)
            .value("SizingBottom", CEGUI::FrameWindow::SizingBottom)
            .value("SizingRight", CEGUI::FrameWindow::SizingRight)
            .export_values()
            ;
        { //::CEGUI::FrameWindow::getCloseButton
        
            typedef ::CEGUI::PushButton * ( ::CEGUI::FrameWindow::*getCloseButton_function_type )(  ) const;
            
            FrameWindow_exposer.def( 
                "getCloseButton"
                , getCloseButton_function_type( &::CEGUI::FrameWindow::getCloseButton )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Return a pointer to the close button component widget for this\n\
                    FrameWindow.\n\
            \n\
                @return\n\
                    Pointer to a PushButton object.\n\
            \n\
                @exception UnknownObjectException\n\
                    Thrown if the close button component does not exist.\n\
                *\n" );
        
        }
        { //::CEGUI::FrameWindow::getEWSizingCursorImage
        
            typedef ::CEGUI::Image const * ( ::CEGUI::FrameWindow::*getEWSizingCursorImage_function_type )(  ) const;
            
            FrameWindow_exposer.def( 
                "getEWSizingCursorImage"
                , getEWSizingCursorImage_function_type( &::CEGUI::FrameWindow::getEWSizingCursorImage )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Return a pointer to the currently set Image to be used for the east-west\n\
                    sizing mouse cursor.\n\
            \n\
                @return\n\
                    Pointer to an Image object, or 0 for none.\n\
                *\n" );
        
        }
        { //::CEGUI::FrameWindow::getNESWSizingCursorImage
        
            typedef ::CEGUI::Image const * ( ::CEGUI::FrameWindow::*getNESWSizingCursorImage_function_type )(  ) const;
            
            FrameWindow_exposer.def( 
                "getNESWSizingCursorImage"
                , getNESWSizingCursorImage_function_type( &::CEGUI::FrameWindow::getNESWSizingCursorImage )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Return a pointer to the currently set Image to be used for the northeast-southwest\n\
                    sizing mouse cursor.\n\
            \n\
                @return\n\
                    Pointer to an Image object, or 0 for none.\n\
                *\n" );
        
        }
        { //::CEGUI::FrameWindow::getNSSizingCursorImage
        
            typedef ::CEGUI::Image const * ( ::CEGUI::FrameWindow::*getNSSizingCursorImage_function_type )(  ) const;
            
            FrameWindow_exposer.def( 
                "getNSSizingCursorImage"
                , getNSSizingCursorImage_function_type( &::CEGUI::FrameWindow::getNSSizingCursorImage )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Return a pointer to the currently set Image to be used for the north-south\n\
                    sizing mouse cursor.\n\
            \n\
                @return\n\
                    Pointer to an Image object, or 0 for none.\n\
                *\n" );
        
        }
        { //::CEGUI::FrameWindow::getNWSESizingCursorImage
        
            typedef ::CEGUI::Image const * ( ::CEGUI::FrameWindow::*getNWSESizingCursorImage_function_type )(  ) const;
            
            FrameWindow_exposer.def( 
                "getNWSESizingCursorImage"
                , getNWSESizingCursorImage_function_type( &::CEGUI::FrameWindow::getNWSESizingCursorImage )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Return a pointer to the currently set Image to be used for the northwest-southeast\n\
                    sizing mouse cursor.\n\
            \n\
                @return\n\
                    Pointer to an Image object, or 0 for none.\n\
                *\n" );
        
        }
        { //::CEGUI::FrameWindow::getSizingBorderThickness
        
            typedef float ( ::CEGUI::FrameWindow::*getSizingBorderThickness_function_type )(  ) const;
            
            FrameWindow_exposer.def( 
                "getSizingBorderThickness"
                , getSizingBorderThickness_function_type( &::CEGUI::FrameWindow::getSizingBorderThickness )
                , "*!\n\
               \n\
                  Return the thickness of the sizing border.\n\
            \n\
               @return\n\
                  float value describing the thickness of the sizing border in screen pixels.\n\
               *\n" );
        
        }
        { //::CEGUI::FrameWindow::getTitlebar
        
            typedef ::CEGUI::Titlebar * ( ::CEGUI::FrameWindow::*getTitlebar_function_type )(  ) const;
            
            FrameWindow_exposer.def( 
                "getTitlebar"
                , getTitlebar_function_type( &::CEGUI::FrameWindow::getTitlebar )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Return a pointer to the Titlebar component widget for this FrameWindow.\n\
            \n\
                @return\n\
                    Pointer to a Titlebar object.\n\
            \n\
                @exception UnknownObjectException\n\
                    Thrown if the Titlebar component does not exist.\n\
                *\n" );
        
        }
        { //::CEGUI::FrameWindow::initialiseComponents
        
            typedef void ( ::CEGUI::FrameWindow::*initialiseComponents_function_type )(  ) ;
            typedef void ( FrameWindow_wrapper::*default_initialiseComponents_function_type )(  ) ;
            
            FrameWindow_exposer.def( 
                "initialiseComponents"
                , initialiseComponents_function_type(&::CEGUI::FrameWindow::initialiseComponents)
                , default_initialiseComponents_function_type(&FrameWindow_wrapper::default_initialiseComponents) );
        
        }
        { //::CEGUI::FrameWindow::isCloseButtonEnabled
        
            typedef bool ( ::CEGUI::FrameWindow::*isCloseButtonEnabled_function_type )(  ) const;
            
            FrameWindow_exposer.def( 
                "isCloseButtonEnabled"
                , isCloseButtonEnabled_function_type( &::CEGUI::FrameWindow::isCloseButtonEnabled )
                , "*!\n\
               \n\
                  Return whether this close button for this window is enabled.\n\
            \n\
               @return\n\
                  true if the window has a close button and it is enabled, false if the window either has no\
                  close button or if the close button is disabled.\n\
               *\n" );
        
        }
        { //::CEGUI::FrameWindow::isDragMovingEnabled
        
            typedef bool ( ::CEGUI::FrameWindow::*isDragMovingEnabled_function_type )(  ) const;
            
            FrameWindow_exposer.def( 
                "isDragMovingEnabled"
                , isDragMovingEnabled_function_type( &::CEGUI::FrameWindow::isDragMovingEnabled )
                , "*!\n\
               \n\
                  Return whether this FrameWindow can be moved by dragging the title bar.\n\
            \n\
               @return\n\
                  true if the Window will move when the user drags the title bar, false if the window will not\
                  move.\n\
               *\n" );
        
        }
        { //::CEGUI::FrameWindow::isFrameEnabled
        
            typedef bool ( ::CEGUI::FrameWindow::*isFrameEnabled_function_type )(  ) const;
            
            FrameWindow_exposer.def( 
                "isFrameEnabled"
                , isFrameEnabled_function_type( &::CEGUI::FrameWindow::isFrameEnabled )
                , "*!\n\
               \n\
                  Return whether the frame for this window is enabled.\n\
            \n\
               @return\n\
                  true if the frame for this window is enabled, false if the frame for this window is\
                  disabled.\n\
               *\n" );
        
        }
        { //::CEGUI::FrameWindow::isHit
        
            typedef bool ( ::CEGUI::FrameWindow::*isHit_function_type )( ::CEGUI::Point const &,bool const ) const;
            typedef bool ( FrameWindow_wrapper::*default_isHit_function_type )( ::CEGUI::Point const &,bool const ) const;
            
            FrameWindow_exposer.def( 
                "isHit"
                , isHit_function_type(&::CEGUI::FrameWindow::isHit)
                , default_isHit_function_type(&FrameWindow_wrapper::default_isHit)
                , ( bp::arg("position"), bp::arg("arg1") ) );
        
        }
        { //::CEGUI::FrameWindow::isRolledup
        
            typedef bool ( ::CEGUI::FrameWindow::*isRolledup_function_type )(  ) const;
            
            FrameWindow_exposer.def( 
                "isRolledup"
                , isRolledup_function_type( &::CEGUI::FrameWindow::isRolledup )
                , "*!\n\
               \n\
                  Return whether the window is currently rolled up (a.k.a shaded).\n\
            \n\
               @return\n\
                  true if the window is rolled up, false if the window is not rolled up.\n\
               *\n" );
        
        }
        { //::CEGUI::FrameWindow::isRollupEnabled
        
            typedef bool ( ::CEGUI::FrameWindow::*isRollupEnabled_function_type )(  ) const;
            
            FrameWindow_exposer.def( 
                "isRollupEnabled"
                , isRollupEnabled_function_type( &::CEGUI::FrameWindow::isRollupEnabled )
                , "*!\n\
               \n\
                  Return whether roll up (a.k.a shading) is enabled for this window.\n\
            \n\
               @return\n\
                  true if roll up is enabled, false if roll up is disabled.\n\
               *\n" );
        
        }
        { //::CEGUI::FrameWindow::isSizingEnabled
        
            typedef bool ( ::CEGUI::FrameWindow::*isSizingEnabled_function_type )(  ) const;
            
            FrameWindow_exposer.def( 
                "isSizingEnabled"
                , isSizingEnabled_function_type( &::CEGUI::FrameWindow::isSizingEnabled )
                , "*!\n\
               \n\
                  Return whether this window is sizable.  Note that this requires that the window have an\
                  enabled frame and that sizing itself is enabled\n\
            \n\
               @return\n\
                  true if the window can be sized, false if the window can not be sized\n\
               *\n" );
        
        }
        { //::CEGUI::FrameWindow::isTitleBarEnabled
        
            typedef bool ( ::CEGUI::FrameWindow::*isTitleBarEnabled_function_type )(  ) const;
            
            FrameWindow_exposer.def( 
                "isTitleBarEnabled"
                , isTitleBarEnabled_function_type( &::CEGUI::FrameWindow::isTitleBarEnabled )
                , "*!\n\
               \n\
                  Return whether the title bar for this window is enabled.\n\
            \n\
               @return\n\
                  true if the window has a title bar and it is enabled, false if the window has no title bar or\
                  if the title bar is disabled.\n\
               *  \n" );
        
        }
        { //::CEGUI::FrameWindow::offsetPixelPosition
        
            typedef void ( ::CEGUI::FrameWindow::*offsetPixelPosition_function_type )( ::CEGUI::Vector2 const & ) ;
            
            FrameWindow_exposer.def( 
                "offsetPixelPosition"
                , offsetPixelPosition_function_type( &::CEGUI::FrameWindow::offsetPixelPosition )
                , ( bp::arg("offset") )
                , "*!\n\
               \n\
                  Move the window by the pixel offsets specified in  offset.\n\
            \n\
                  This is intended for internal system use - it is the method by which the title bar moves the\
                  frame window.\n\
            \n\
               @param offset\n\
                  Vector2 object containing the offsets to apply (offsets are in screen pixels).\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::FrameWindow::setCloseButtonEnabled
        
            typedef void ( ::CEGUI::FrameWindow::*setCloseButtonEnabled_function_type )( bool ) ;
            
            FrameWindow_exposer.def( 
                "setCloseButtonEnabled"
                , setCloseButtonEnabled_function_type( &::CEGUI::FrameWindow::setCloseButtonEnabled )
                , ( bp::arg("setting") )
                , "*!\n\
               \n\
                  Enables or disables the close button for the frame window.\n\
            \n\
               @param setting\n\
                  Set to true to enable the close button (if one is attached), or false to disable the close\
                  button.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::FrameWindow::setDragMovingEnabled
        
            typedef void ( ::CEGUI::FrameWindow::*setDragMovingEnabled_function_type )( bool ) ;
            
            FrameWindow_exposer.def( 
                "setDragMovingEnabled"
                , setDragMovingEnabled_function_type( &::CEGUI::FrameWindow::setDragMovingEnabled )
                , ( bp::arg("setting") )
                , "*!\n\
               \n\
                  Set whether this FrameWindow can be moved by dragging the title bar.\n\
            \n\
               @param setting\n\
                  true if the Window should move when the user drags the title bar, false if the window should\
                  not move.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::FrameWindow::setEWSizingCursorImage
        
            typedef void ( ::CEGUI::FrameWindow::*setEWSizingCursorImage_function_type )( ::CEGUI::Image const * ) ;
            
            FrameWindow_exposer.def( 
                "setEWSizingCursorImage"
                , setEWSizingCursorImage_function_type( &::CEGUI::FrameWindow::setEWSizingCursorImage )
                , ( bp::arg("image") )
                , "*!\n\
                \n\
                    Set the Image to be used for the east-west sizing mouse cursor.\n\
            \n\
                @param image\n\
                    Pointer to an Image object, or 0 for none.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::FrameWindow::setEWSizingCursorImage
        
            typedef void ( ::CEGUI::FrameWindow::*setEWSizingCursorImage_function_type )( ::CEGUI::String const &,::CEGUI::String const & ) ;
            
            FrameWindow_exposer.def( 
                "setEWSizingCursorImage"
                , setEWSizingCursorImage_function_type( &::CEGUI::FrameWindow::setEWSizingCursorImage )
                , ( bp::arg("imageset"), bp::arg("image") )
                , "*!\n\
                \n\
                    Set the image to be used for the east-west sizing mouse cursor.\n\
            \n\
                @param imageset\n\
                    String holding the name of the Imageset containing the Image to be used.\n\
            \n\
                @param image\n\
                    String holding the name of the Image to be used.\n\
            \n\
                @return\n\
                    Nothing.\n\
            \n\
                @exception UnknownObjectException thrown if either  imageset or  image refer to non-existant\
                entities.\n\
                *\n" );
        
        }
        { //::CEGUI::FrameWindow::setFrameEnabled
        
            typedef void ( ::CEGUI::FrameWindow::*setFrameEnabled_function_type )( bool ) ;
            
            FrameWindow_exposer.def( 
                "setFrameEnabled"
                , setFrameEnabled_function_type( &::CEGUI::FrameWindow::setFrameEnabled )
                , ( bp::arg("setting") )
                , "*!\n\
               \n\
                  Enables or disables the frame for this window.\n\
            \n\
               @param setting\n\
                  set to true to enable the frame for this window, or false to disable the frame for this\
                  window.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::FrameWindow::setNESWSizingCursorImage
        
            typedef void ( ::CEGUI::FrameWindow::*setNESWSizingCursorImage_function_type )( ::CEGUI::Image const * ) ;
            
            FrameWindow_exposer.def( 
                "setNESWSizingCursorImage"
                , setNESWSizingCursorImage_function_type( &::CEGUI::FrameWindow::setNESWSizingCursorImage )
                , ( bp::arg("image") )
                , "*!\n\
                \n\
                    Set the Image to be used for the northeast-southwest sizing mouse cursor.\n\
            \n\
                @param image\n\
                    Pointer to an Image object, or 0 for none.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::FrameWindow::setNESWSizingCursorImage
        
            typedef void ( ::CEGUI::FrameWindow::*setNESWSizingCursorImage_function_type )( ::CEGUI::String const &,::CEGUI::String const & ) ;
            
            FrameWindow_exposer.def( 
                "setNESWSizingCursorImage"
                , setNESWSizingCursorImage_function_type( &::CEGUI::FrameWindow::setNESWSizingCursorImage )
                , ( bp::arg("imageset"), bp::arg("image") )
                , "*!\n\
                \n\
                    Set the image to be used for the northeast-southwest sizing mouse cursor.\n\
            \n\
                @param imageset\n\
                    String holding the name of the Imageset containing the Image to be used.\n\
            \n\
                @param image\n\
                    String holding the name of the Image to be used.\n\
            \n\
                @return\n\
                    Nothing.\n\
            \n\
                @exception UnknownObjectException thrown if either  imageset or  image refer to non-existant\
                entities.\n\
                *\n" );
        
        }
        { //::CEGUI::FrameWindow::setNSSizingCursorImage
        
            typedef void ( ::CEGUI::FrameWindow::*setNSSizingCursorImage_function_type )( ::CEGUI::Image const * ) ;
            
            FrameWindow_exposer.def( 
                "setNSSizingCursorImage"
                , setNSSizingCursorImage_function_type( &::CEGUI::FrameWindow::setNSSizingCursorImage )
                , ( bp::arg("image") )
                , "*!\n\
                \n\
                    Set the Image to be used for the north-south sizing mouse cursor.\n\
            \n\
                @param image\n\
                    Pointer to an Image object, or 0 for none.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::FrameWindow::setNSSizingCursorImage
        
            typedef void ( ::CEGUI::FrameWindow::*setNSSizingCursorImage_function_type )( ::CEGUI::String const &,::CEGUI::String const & ) ;
            
            FrameWindow_exposer.def( 
                "setNSSizingCursorImage"
                , setNSSizingCursorImage_function_type( &::CEGUI::FrameWindow::setNSSizingCursorImage )
                , ( bp::arg("imageset"), bp::arg("image") )
                , "*!\n\
                \n\
                    Set the image to be used for the north-south sizing mouse cursor.\n\
            \n\
                @param imageset\n\
                    String holding the name of the Imageset containing the Image to be used.\n\
            \n\
                @param image\n\
                    String holding the name of the Image to be used.\n\
            \n\
                @return\n\
                    Nothing.\n\
            \n\
                @exception UnknownObjectException thrown if either  imageset or  image refer to non-existant\
                entities.\n\
                *\n" );
        
        }
        { //::CEGUI::FrameWindow::setNWSESizingCursorImage
        
            typedef void ( ::CEGUI::FrameWindow::*setNWSESizingCursorImage_function_type )( ::CEGUI::Image const * ) ;
            
            FrameWindow_exposer.def( 
                "setNWSESizingCursorImage"
                , setNWSESizingCursorImage_function_type( &::CEGUI::FrameWindow::setNWSESizingCursorImage )
                , ( bp::arg("image") )
                , "*!\n\
                \n\
                    Set the Image to be used for the northwest-southeast sizing mouse cursor.\n\
            \n\
                @param image\n\
                    Pointer to an Image object, or 0 for none.\n\
            \n\
                @return\n\
                    Nothing.\n\
                *\n" );
        
        }
        { //::CEGUI::FrameWindow::setNWSESizingCursorImage
        
            typedef void ( ::CEGUI::FrameWindow::*setNWSESizingCursorImage_function_type )( ::CEGUI::String const &,::CEGUI::String const & ) ;
            
            FrameWindow_exposer.def( 
                "setNWSESizingCursorImage"
                , setNWSESizingCursorImage_function_type( &::CEGUI::FrameWindow::setNWSESizingCursorImage )
                , ( bp::arg("imageset"), bp::arg("image") )
                , "*!\n\
                \n\
                    Set the image to be used for the northwest-southeast sizing mouse cursor.\n\
            \n\
                @param imageset\n\
                    String holding the name of the Imageset containing the Image to be used.\n\
            \n\
                @param image\n\
                    String holding the name of the Image to be used.\n\
            \n\
                @return\n\
                    Nothing.\n\
            \n\
                @exception UnknownObjectException thrown if either  imageset or  image refer to non-existant\
                entities.\n\
                *\n" );
        
        }
        { //::CEGUI::FrameWindow::setRollupEnabled
        
            typedef void ( ::CEGUI::FrameWindow::*setRollupEnabled_function_type )( bool ) ;
            
            FrameWindow_exposer.def( 
                "setRollupEnabled"
                , setRollupEnabled_function_type( &::CEGUI::FrameWindow::setRollupEnabled )
                , ( bp::arg("setting") )
                , "*!\n\
               \n\
                  Enables or disables roll-up (shading) for this window.\n\
            \n\
               @param setting\n\
                  Set to true to enable roll-up for the frame window, or false to disable roll-up.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::FrameWindow::setSizingBorderThickness
        
            typedef void ( ::CEGUI::FrameWindow::*setSizingBorderThickness_function_type )( float ) ;
            
            FrameWindow_exposer.def( 
                "setSizingBorderThickness"
                , setSizingBorderThickness_function_type( &::CEGUI::FrameWindow::setSizingBorderThickness )
                , ( bp::arg("pixels") )
                , "*!\n\
               \n\
                  Set the size of the sizing border for this window.\n\
            \n\
               @param pixels\n\
                  float value specifying the thickness for the sizing border in screen pixels.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::FrameWindow::setSizingEnabled
        
            typedef void ( ::CEGUI::FrameWindow::*setSizingEnabled_function_type )( bool ) ;
            
            FrameWindow_exposer.def( 
                "setSizingEnabled"
                , setSizingEnabled_function_type( &::CEGUI::FrameWindow::setSizingEnabled )
                , ( bp::arg("setting") )
                , "*!\n\
               \n\
                  Enables or disables sizing for this window.\n\
            \n\
               @param setting\n\
                  set to true to enable sizing (also requires frame to be enabled), or false to disable\
                  sizing.\n\
            \n\
               @return\n\
                  nothing\n\
               *\n" );
        
        }
        { //::CEGUI::FrameWindow::setTitleBarEnabled
        
            typedef void ( ::CEGUI::FrameWindow::*setTitleBarEnabled_function_type )( bool ) ;
            
            FrameWindow_exposer.def( 
                "setTitleBarEnabled"
                , setTitleBarEnabled_function_type( &::CEGUI::FrameWindow::setTitleBarEnabled )
                , ( bp::arg("setting") )
                , "*!\n\
               \n\
                  Enables or disables the title bar for the frame window.\n\
            \n\
               @param setting\n\
                  set to true to enable the title bar (if one is attached), or false to disable the title bar.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::FrameWindow::toggleRollup
        
            typedef void ( ::CEGUI::FrameWindow::*toggleRollup_function_type )(  ) ;
            
            FrameWindow_exposer.def( 
                "toggleRollup"
                , toggleRollup_function_type( &::CEGUI::FrameWindow::toggleRollup )
                , "*!\n\
               \n\
                  Toggles the state of the window between rolled-up (shaded) and normal sizes.  This requires\
                  roll-up to be enabled.\n\
            \n\
               @return\n\
                  Nothing\n\
               *\n" );
        
        }
        FrameWindow_exposer.add_static_property( "CloseButtonNameSuffix"
                        , bp::make_getter( &CEGUI::FrameWindow::CloseButtonNameSuffix
                                , bp::return_value_policy< bp::return_by_value >() ) );
        FrameWindow_exposer.def_readonly( "DefaultSizingBorderSize", CEGUI::FrameWindow::DefaultSizingBorderSize, "other bits\n" );
        FrameWindow_exposer.add_static_property( "EventCloseClicked"
                        , bp::make_getter( &CEGUI::FrameWindow::EventCloseClicked
                                , bp::return_value_policy< bp::return_by_value >() ) );
        FrameWindow_exposer.add_static_property( "EventDragSizingEnded"
                        , bp::make_getter( &CEGUI::FrameWindow::EventDragSizingEnded
                                , bp::return_value_policy< bp::return_by_value >() ) );
        FrameWindow_exposer.add_static_property( "EventDragSizingStarted"
                        , bp::make_getter( &CEGUI::FrameWindow::EventDragSizingStarted
                                , bp::return_value_policy< bp::return_by_value >() ) );
        FrameWindow_exposer.add_static_property( "EventRollupToggled"
                        , bp::make_getter( &CEGUI::FrameWindow::EventRollupToggled
                                , bp::return_value_policy< bp::return_by_value >() ) );
        FrameWindow_exposer.add_static_property( "TitlebarNameSuffix"
                        , bp::make_getter( &CEGUI::FrameWindow::TitlebarNameSuffix
                                , bp::return_value_policy< bp::return_by_value >() ) );
        { //::CEGUI::Window::beginInitialisation
        
            typedef void ( ::CEGUI::Window::*beginInitialisation_function_type )(  ) ;
            typedef void ( FrameWindow_wrapper::*default_beginInitialisation_function_type )(  ) ;
            
            FrameWindow_exposer.def( 
                "beginInitialisation"
                , beginInitialisation_function_type(&::CEGUI::Window::beginInitialisation)
                , default_beginInitialisation_function_type(&FrameWindow_wrapper::default_beginInitialisation) );
        
        }
        { //::CEGUI::Window::cloneChildWidgetsTo
        
            typedef void ( ::CEGUI::Window::*cloneChildWidgetsTo_function_type )( ::CEGUI::Window & ) const;
            typedef void ( FrameWindow_wrapper::*default_cloneChildWidgetsTo_function_type )( ::CEGUI::Window & ) const;
            
            FrameWindow_exposer.def( 
                "cloneChildWidgetsTo"
                , cloneChildWidgetsTo_function_type(&::CEGUI::Window::cloneChildWidgetsTo)
                , default_cloneChildWidgetsTo_function_type(&FrameWindow_wrapper::default_cloneChildWidgetsTo)
                , ( bp::arg("target") ) );
        
        }
        { //::CEGUI::Window::clonePropertiesTo
        
            typedef void ( ::CEGUI::Window::*clonePropertiesTo_function_type )( ::CEGUI::Window & ) const;
            typedef void ( FrameWindow_wrapper::*default_clonePropertiesTo_function_type )( ::CEGUI::Window & ) const;
            
            FrameWindow_exposer.def( 
                "clonePropertiesTo"
                , clonePropertiesTo_function_type(&::CEGUI::Window::clonePropertiesTo)
                , default_clonePropertiesTo_function_type(&FrameWindow_wrapper::default_clonePropertiesTo)
                , ( bp::arg("target") ) );
        
        }
        { //::CEGUI::Window::destroy
        
            typedef void ( ::CEGUI::Window::*destroy_function_type )(  ) ;
            typedef void ( FrameWindow_wrapper::*default_destroy_function_type )(  ) ;
            
            FrameWindow_exposer.def( 
                "destroy"
                , destroy_function_type(&::CEGUI::Window::destroy)
                , default_destroy_function_type(&FrameWindow_wrapper::default_destroy) );
        
        }
        { //::CEGUI::Window::endInitialisation
        
            typedef void ( ::CEGUI::Window::*endInitialisation_function_type )(  ) ;
            typedef void ( FrameWindow_wrapper::*default_endInitialisation_function_type )(  ) ;
            
            FrameWindow_exposer.def( 
                "endInitialisation"
                , endInitialisation_function_type(&::CEGUI::Window::endInitialisation)
                , default_endInitialisation_function_type(&FrameWindow_wrapper::default_endInitialisation) );
        
        }
        { //::CEGUI::EventSet::fireEvent
        
            typedef void ( ::CEGUI::EventSet::*fireEvent_function_type )( ::CEGUI::String const &,::CEGUI::EventArgs &,::CEGUI::String const & ) ;
            typedef void ( FrameWindow_wrapper::*default_fireEvent_function_type )( ::CEGUI::String const &,::CEGUI::EventArgs &,::CEGUI::String const & ) ;
            
            FrameWindow_exposer.def( 
                "fireEvent"
                , fireEvent_function_type(&::CEGUI::EventSet::fireEvent)
                , default_fireEvent_function_type(&FrameWindow_wrapper::default_fireEvent)
                , ( bp::arg("name"), bp::arg("args"), bp::arg("eventNamespace")="" ) );
        
        }
        { //::CEGUI::Window::getRenderedStringParser
        
            typedef ::CEGUI::RenderedStringParser & ( ::CEGUI::Window::*getRenderedStringParser_function_type )(  ) const;
            
            FrameWindow_exposer.def( 
                "getRenderedStringParser"
                , getRenderedStringParser_function_type(&::CEGUI::Window::getRenderedStringParser)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::Window::getRenderingContext_impl
        
            typedef void ( ::CEGUI::Window::*getRenderingContext_impl_function_type )( ::CEGUI::RenderingContext & ) const;
            typedef void ( FrameWindow_wrapper::*default_getRenderingContext_impl_function_type )( ::CEGUI::RenderingContext & ) const;
            
            FrameWindow_exposer.def( 
                "getRenderingContext_impl"
                , getRenderingContext_impl_function_type(&::CEGUI::Window::getRenderingContext_impl)
                , default_getRenderingContext_impl_function_type(&FrameWindow_wrapper::default_getRenderingContext_impl)
                , ( bp::arg("ctx") ) );
        
        }
        { //::CEGUI::Window::getUnclippedInnerRect_impl
        
            typedef ::CEGUI::Rect ( ::CEGUI::Window::*getUnclippedInnerRect_impl_function_type )(  ) const;
            typedef ::CEGUI::Rect ( FrameWindow_wrapper::*default_getUnclippedInnerRect_impl_function_type )(  ) const;
            
            FrameWindow_exposer.def( 
                "getUnclippedInnerRect_impl"
                , getUnclippedInnerRect_impl_function_type(&::CEGUI::Window::getUnclippedInnerRect_impl)
                , default_getUnclippedInnerRect_impl_function_type(&FrameWindow_wrapper::default_getUnclippedInnerRect_impl) );
        
        }
        { //::CEGUI::Window::performChildWindowLayout
        
            typedef void ( ::CEGUI::Window::*performChildWindowLayout_function_type )(  ) ;
            typedef void ( FrameWindow_wrapper::*default_performChildWindowLayout_function_type )(  ) ;
            
            FrameWindow_exposer.def( 
                "performChildWindowLayout"
                , performChildWindowLayout_function_type(&::CEGUI::Window::performChildWindowLayout)
                , default_performChildWindowLayout_function_type(&FrameWindow_wrapper::default_performChildWindowLayout) );
        
        }
        { //::CEGUI::Window::setLookNFeel
        
            typedef void ( ::CEGUI::Window::*setLookNFeel_function_type )( ::CEGUI::String const & ) ;
            typedef void ( FrameWindow_wrapper::*default_setLookNFeel_function_type )( ::CEGUI::String const & ) ;
            
            FrameWindow_exposer.def( 
                "setLookNFeel"
                , setLookNFeel_function_type(&::CEGUI::Window::setLookNFeel)
                , default_setLookNFeel_function_type(&FrameWindow_wrapper::default_setLookNFeel)
                , ( bp::arg("look") ) );
        
        }
        { //::CEGUI::Window::setMargin
        
            typedef void ( ::CEGUI::Window::*setMargin_function_type )( ::CEGUI::UBox const & ) ;
            typedef void ( FrameWindow_wrapper::*default_setMargin_function_type )( ::CEGUI::UBox const & ) ;
            
            FrameWindow_exposer.def( 
                "setMargin"
                , setMargin_function_type(&::CEGUI::Window::setMargin)
                , default_setMargin_function_type(&FrameWindow_wrapper::default_setMargin)
                , ( bp::arg("margin") ) );
        
        }
        { //::CEGUI::EventSet::subscribeScriptedEvent
        
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( ::CEGUI::EventSet::*subscribeScriptedEvent_function_type )( ::CEGUI::String const &,::CEGUI::String const & ) ;
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( FrameWindow_wrapper::*default_subscribeScriptedEvent_function_type )( ::CEGUI::String const &,::CEGUI::String const & ) ;
            
            FrameWindow_exposer.def( 
                "subscribeScriptedEvent"
                , subscribeScriptedEvent_function_type(&::CEGUI::EventSet::subscribeScriptedEvent)
                , default_subscribeScriptedEvent_function_type(&FrameWindow_wrapper::default_subscribeScriptedEvent)
                , ( bp::arg("name"), bp::arg("subscriber_name") ) );
        
        }
        { //::CEGUI::EventSet::subscribeScriptedEvent
        
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( ::CEGUI::EventSet::*subscribeScriptedEvent_function_type )( ::CEGUI::String const &,unsigned int,::CEGUI::String const & ) ;
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( FrameWindow_wrapper::*default_subscribeScriptedEvent_function_type )( ::CEGUI::String const &,unsigned int,::CEGUI::String const & ) ;
            
            FrameWindow_exposer.def( 
                "subscribeScriptedEvent"
                , subscribeScriptedEvent_function_type(&::CEGUI::EventSet::subscribeScriptedEvent)
                , default_subscribeScriptedEvent_function_type(&FrameWindow_wrapper::default_subscribeScriptedEvent)
                , ( bp::arg("name"), bp::arg("group"), bp::arg("subscriber_name") ) );
        
        }
        { //::CEGUI::Window::update
        
            typedef void ( ::CEGUI::Window::*update_function_type )( float ) ;
            typedef void ( FrameWindow_wrapper::*default_update_function_type )( float ) ;
            
            FrameWindow_exposer.def( 
                "update"
                , update_function_type(&::CEGUI::Window::update)
                , default_update_function_type(&FrameWindow_wrapper::default_update)
                , ( bp::arg("elapsed") ) );
        
        }
        { //::CEGUI::Window::writeXMLToStream
        
            typedef void ( ::CEGUI::Window::*writeXMLToStream_function_type )( ::CEGUI::XMLSerializer & ) const;
            typedef void ( FrameWindow_wrapper::*default_writeXMLToStream_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            FrameWindow_exposer.def( 
                "writeXMLToStream"
                , writeXMLToStream_function_type(&::CEGUI::Window::writeXMLToStream)
                , default_writeXMLToStream_function_type(&FrameWindow_wrapper::default_writeXMLToStream)
                , ( bp::arg("xml_stream") ) );
        
        }
    }

}
