// This file has been generated by Py++.

#include "boost/python.hpp"
#include "python_CEGUI.h"
#include "PropertyHelper.pypp.hpp"

namespace bp = boost::python;

void register_PropertyHelper_class(){

    { //::CEGUI::PropertyHelper
        typedef bp::class_< CEGUI::PropertyHelper > PropertyHelper_exposer_t;
        PropertyHelper_exposer_t PropertyHelper_exposer = PropertyHelper_exposer_t( "PropertyHelper", "*!\n\
        \n\
           Helper class used to convert various data types to and from the format expected in Propery\
           strings\n\
        *\n" );
        bp::scope PropertyHelper_scope( PropertyHelper_exposer );
        { //::CEGUI::PropertyHelper::boolToString
        
            typedef ::CEGUI::String ( *boolToString_function_type )( bool );
            
            PropertyHelper_exposer.def( 
                "boolToString"
                , boolToString_function_type( &::CEGUI::PropertyHelper::boolToString )
                , ( bp::arg("val") ) );
        
        }
        { //::CEGUI::PropertyHelper::colourRectToString
        
            typedef ::CEGUI::String ( *colourRectToString_function_type )( ::CEGUI::ColourRect const & );
            
            PropertyHelper_exposer.def( 
                "colourRectToString"
                , colourRectToString_function_type( &::CEGUI::PropertyHelper::colourRectToString )
                , ( bp::arg("val") ) );
        
        }
        { //::CEGUI::PropertyHelper::colourToString
        
            typedef ::CEGUI::String ( *colourToString_function_type )( ::CEGUI::colour const & );
            
            PropertyHelper_exposer.def( 
                "colourToString"
                , colourToString_function_type( &::CEGUI::PropertyHelper::colourToString )
                , ( bp::arg("val") ) );
        
        }
        { //::CEGUI::PropertyHelper::floatToString
        
            typedef ::CEGUI::String ( *floatToString_function_type )( float );
            
            PropertyHelper_exposer.def( 
                "floatToString"
                , floatToString_function_type( &::CEGUI::PropertyHelper::floatToString )
                , ( bp::arg("val") ) );
        
        }
        { //::CEGUI::PropertyHelper::imageToString
        
            typedef ::CEGUI::String ( *imageToString_function_type )( ::CEGUI::Image const * const );
            
            PropertyHelper_exposer.def( 
                "imageToString"
                , imageToString_function_type( &::CEGUI::PropertyHelper::imageToString )
                , ( bp::arg("val") ) );
        
        }
        { //::CEGUI::PropertyHelper::intToString
        
            typedef ::CEGUI::String ( *intToString_function_type )( int );
            
            PropertyHelper_exposer.def( 
                "intToString"
                , intToString_function_type( &::CEGUI::PropertyHelper::intToString )
                , ( bp::arg("val") ) );
        
        }
        { //::CEGUI::PropertyHelper::pointToString
        
            typedef ::CEGUI::String ( *pointToString_function_type )( ::CEGUI::Point const & );
            
            PropertyHelper_exposer.def( 
                "pointToString"
                , pointToString_function_type( &::CEGUI::PropertyHelper::pointToString )
                , ( bp::arg("val") ) );
        
        }
        { //::CEGUI::PropertyHelper::rectToString
        
            typedef ::CEGUI::String ( *rectToString_function_type )( ::CEGUI::Rect const & );
            
            PropertyHelper_exposer.def( 
                "rectToString"
                , rectToString_function_type( &::CEGUI::PropertyHelper::rectToString )
                , ( bp::arg("val") ) );
        
        }
        { //::CEGUI::PropertyHelper::sizeToString
        
            typedef ::CEGUI::String ( *sizeToString_function_type )( ::CEGUI::Size const & );
            
            PropertyHelper_exposer.def( 
                "sizeToString"
                , sizeToString_function_type( &::CEGUI::PropertyHelper::sizeToString )
                , ( bp::arg("val") ) );
        
        }
        { //::CEGUI::PropertyHelper::stringToBool
        
            typedef bool ( *stringToBool_function_type )( ::CEGUI::String const & );
            
            PropertyHelper_exposer.def( 
                "stringToBool"
                , stringToBool_function_type( &::CEGUI::PropertyHelper::stringToBool )
                , ( bp::arg("str") ) );
        
        }
        { //::CEGUI::PropertyHelper::stringToColour
        
            typedef ::CEGUI::colour ( *stringToColour_function_type )( ::CEGUI::String const & );
            
            PropertyHelper_exposer.def( 
                "stringToColour"
                , stringToColour_function_type( &::CEGUI::PropertyHelper::stringToColour )
                , ( bp::arg("str") ) );
        
        }
        { //::CEGUI::PropertyHelper::stringToColourRect
        
            typedef ::CEGUI::ColourRect ( *stringToColourRect_function_type )( ::CEGUI::String const & );
            
            PropertyHelper_exposer.def( 
                "stringToColourRect"
                , stringToColourRect_function_type( &::CEGUI::PropertyHelper::stringToColourRect )
                , ( bp::arg("str") ) );
        
        }
        { //::CEGUI::PropertyHelper::stringToFloat
        
            typedef float ( *stringToFloat_function_type )( ::CEGUI::String const & );
            
            PropertyHelper_exposer.def( 
                "stringToFloat"
                , stringToFloat_function_type( &::CEGUI::PropertyHelper::stringToFloat )
                , ( bp::arg("str") ) );
        
        }
        { //::CEGUI::PropertyHelper::stringToImage
        
            typedef ::CEGUI::Image const * ( *stringToImage_function_type )( ::CEGUI::String const & );
            
            PropertyHelper_exposer.def( 
                "stringToImage"
                , stringToImage_function_type( &::CEGUI::PropertyHelper::stringToImage )
                , ( bp::arg("str") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::PropertyHelper::stringToInt
        
            typedef int ( *stringToInt_function_type )( ::CEGUI::String const & );
            
            PropertyHelper_exposer.def( 
                "stringToInt"
                , stringToInt_function_type( &::CEGUI::PropertyHelper::stringToInt )
                , ( bp::arg("str") ) );
        
        }
        { //::CEGUI::PropertyHelper::stringToPoint
        
            typedef ::CEGUI::Point ( *stringToPoint_function_type )( ::CEGUI::String const & );
            
            PropertyHelper_exposer.def( 
                "stringToPoint"
                , stringToPoint_function_type( &::CEGUI::PropertyHelper::stringToPoint )
                , ( bp::arg("str") ) );
        
        }
        { //::CEGUI::PropertyHelper::stringToRect
        
            typedef ::CEGUI::Rect ( *stringToRect_function_type )( ::CEGUI::String const & );
            
            PropertyHelper_exposer.def( 
                "stringToRect"
                , stringToRect_function_type( &::CEGUI::PropertyHelper::stringToRect )
                , ( bp::arg("str") ) );
        
        }
        { //::CEGUI::PropertyHelper::stringToSize
        
            typedef ::CEGUI::Size ( *stringToSize_function_type )( ::CEGUI::String const & );
            
            PropertyHelper_exposer.def( 
                "stringToSize"
                , stringToSize_function_type( &::CEGUI::PropertyHelper::stringToSize )
                , ( bp::arg("str") ) );
        
        }
        { //::CEGUI::PropertyHelper::stringToUBox
        
            typedef ::CEGUI::UBox ( *stringToUBox_function_type )( ::CEGUI::String const & );
            
            PropertyHelper_exposer.def( 
                "stringToUBox"
                , stringToUBox_function_type( &::CEGUI::PropertyHelper::stringToUBox )
                , ( bp::arg("str") ) );
        
        }
        { //::CEGUI::PropertyHelper::stringToUDim
        
            typedef ::CEGUI::UDim ( *stringToUDim_function_type )( ::CEGUI::String const & );
            
            PropertyHelper_exposer.def( 
                "stringToUDim"
                , stringToUDim_function_type( &::CEGUI::PropertyHelper::stringToUDim )
                , ( bp::arg("str") ) );
        
        }
        { //::CEGUI::PropertyHelper::stringToURect
        
            typedef ::CEGUI::URect ( *stringToURect_function_type )( ::CEGUI::String const & );
            
            PropertyHelper_exposer.def( 
                "stringToURect"
                , stringToURect_function_type( &::CEGUI::PropertyHelper::stringToURect )
                , ( bp::arg("str") ) );
        
        }
        { //::CEGUI::PropertyHelper::stringToUVector2
        
            typedef ::CEGUI::UVector2 ( *stringToUVector2_function_type )( ::CEGUI::String const & );
            
            PropertyHelper_exposer.def( 
                "stringToUVector2"
                , stringToUVector2_function_type( &::CEGUI::PropertyHelper::stringToUVector2 )
                , ( bp::arg("str") ) );
        
        }
        { //::CEGUI::PropertyHelper::stringToUint
        
            typedef ::CEGUI::uint ( *stringToUint_function_type )( ::CEGUI::String const & );
            
            PropertyHelper_exposer.def( 
                "stringToUint"
                , stringToUint_function_type( &::CEGUI::PropertyHelper::stringToUint )
                , ( bp::arg("str") ) );
        
        }
        { //::CEGUI::PropertyHelper::stringToVector3
        
            typedef ::CEGUI::Vector3 ( *stringToVector3_function_type )( ::CEGUI::String const & );
            
            PropertyHelper_exposer.def( 
                "stringToVector3"
                , stringToVector3_function_type( &::CEGUI::PropertyHelper::stringToVector3 )
                , ( bp::arg("str") ) );
        
        }
        { //::CEGUI::PropertyHelper::uboxToString
        
            typedef ::CEGUI::String ( *uboxToString_function_type )( ::CEGUI::UBox const & );
            
            PropertyHelper_exposer.def( 
                "uboxToString"
                , uboxToString_function_type( &::CEGUI::PropertyHelper::uboxToString )
                , ( bp::arg("val") ) );
        
        }
        { //::CEGUI::PropertyHelper::udimToString
        
            typedef ::CEGUI::String ( *udimToString_function_type )( ::CEGUI::UDim const & );
            
            PropertyHelper_exposer.def( 
                "udimToString"
                , udimToString_function_type( &::CEGUI::PropertyHelper::udimToString )
                , ( bp::arg("val") ) );
        
        }
        { //::CEGUI::PropertyHelper::uintToString
        
            typedef ::CEGUI::String ( *uintToString_function_type )( ::CEGUI::uint );
            
            PropertyHelper_exposer.def( 
                "uintToString"
                , uintToString_function_type( &::CEGUI::PropertyHelper::uintToString )
                , ( bp::arg("val") ) );
        
        }
        { //::CEGUI::PropertyHelper::urectToString
        
            typedef ::CEGUI::String ( *urectToString_function_type )( ::CEGUI::URect const & );
            
            PropertyHelper_exposer.def( 
                "urectToString"
                , urectToString_function_type( &::CEGUI::PropertyHelper::urectToString )
                , ( bp::arg("val") ) );
        
        }
        { //::CEGUI::PropertyHelper::uvector2ToString
        
            typedef ::CEGUI::String ( *uvector2ToString_function_type )( ::CEGUI::UVector2 const & );
            
            PropertyHelper_exposer.def( 
                "uvector2ToString"
                , uvector2ToString_function_type( &::CEGUI::PropertyHelper::uvector2ToString )
                , ( bp::arg("val") ) );
        
        }
        { //::CEGUI::PropertyHelper::vector3ToString
        
            typedef ::CEGUI::String ( *vector3ToString_function_type )( ::CEGUI::Vector3 const & );
            
            PropertyHelper_exposer.def( 
                "vector3ToString"
                , vector3ToString_function_type( &::CEGUI::PropertyHelper::vector3ToString )
                , ( bp::arg("val") ) );
        
        }
        PropertyHelper_exposer.staticmethod( "boolToString" );
        PropertyHelper_exposer.staticmethod( "colourRectToString" );
        PropertyHelper_exposer.staticmethod( "colourToString" );
        PropertyHelper_exposer.staticmethod( "floatToString" );
        PropertyHelper_exposer.staticmethod( "imageToString" );
        PropertyHelper_exposer.staticmethod( "intToString" );
        PropertyHelper_exposer.staticmethod( "pointToString" );
        PropertyHelper_exposer.staticmethod( "rectToString" );
        PropertyHelper_exposer.staticmethod( "sizeToString" );
        PropertyHelper_exposer.staticmethod( "stringToBool" );
        PropertyHelper_exposer.staticmethod( "stringToColour" );
        PropertyHelper_exposer.staticmethod( "stringToColourRect" );
        PropertyHelper_exposer.staticmethod( "stringToFloat" );
        PropertyHelper_exposer.staticmethod( "stringToImage" );
        PropertyHelper_exposer.staticmethod( "stringToInt" );
        PropertyHelper_exposer.staticmethod( "stringToPoint" );
        PropertyHelper_exposer.staticmethod( "stringToRect" );
        PropertyHelper_exposer.staticmethod( "stringToSize" );
        PropertyHelper_exposer.staticmethod( "stringToUBox" );
        PropertyHelper_exposer.staticmethod( "stringToUDim" );
        PropertyHelper_exposer.staticmethod( "stringToURect" );
        PropertyHelper_exposer.staticmethod( "stringToUVector2" );
        PropertyHelper_exposer.staticmethod( "stringToUint" );
        PropertyHelper_exposer.staticmethod( "stringToVector3" );
        PropertyHelper_exposer.staticmethod( "uboxToString" );
        PropertyHelper_exposer.staticmethod( "udimToString" );
        PropertyHelper_exposer.staticmethod( "uintToString" );
        PropertyHelper_exposer.staticmethod( "urectToString" );
        PropertyHelper_exposer.staticmethod( "uvector2ToString" );
        PropertyHelper_exposer.staticmethod( "vector3ToString" );
    }

}
