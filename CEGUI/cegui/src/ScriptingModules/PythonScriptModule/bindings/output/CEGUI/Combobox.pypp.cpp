// This file has been generated by Py++.

#include "boost/python.hpp"
#include "python_CEGUI.h"
#include "Combobox.pypp.hpp"

namespace bp = boost::python;

struct Combobox_wrapper : CEGUI::Combobox, bp::wrapper< CEGUI::Combobox > {

    Combobox_wrapper(::CEGUI::String const & type, ::CEGUI::String const & name )
    : CEGUI::Combobox( boost::ref(type), boost::ref(name) )
      , bp::wrapper< CEGUI::Combobox >(){
        // constructor
    
    }

    virtual void initialiseComponents(  ) {
        if( bp::override func_initialiseComponents = this->get_override( "initialiseComponents" ) )
            func_initialiseComponents(  );
        else{
            this->CEGUI::Combobox::initialiseComponents(  );
        }
    }
    
    void default_initialiseComponents(  ) {
        CEGUI::Combobox::initialiseComponents( );
    }

    virtual bool isHit( ::CEGUI::Vector2 const & position, bool const allow_disabled=false ) const  {
        if( bp::override func_isHit = this->get_override( "isHit" ) )
            return func_isHit( boost::ref(position), allow_disabled );
        else{
            return this->CEGUI::Combobox::isHit( boost::ref(position), allow_disabled );
        }
    }
    
    bool default_isHit( ::CEGUI::Vector2 const & position, bool const allow_disabled=false ) const  {
        return CEGUI::Combobox::isHit( boost::ref(position), allow_disabled );
    }

    virtual void beginInitialisation(  ) {
        if( bp::override func_beginInitialisation = this->get_override( "beginInitialisation" ) )
            func_beginInitialisation(  );
        else{
            this->CEGUI::Window::beginInitialisation(  );
        }
    }
    
    void default_beginInitialisation(  ) {
        CEGUI::Window::beginInitialisation( );
    }

    virtual void cloneChildWidgetsTo( ::CEGUI::Window & target ) const  {
        if( bp::override func_cloneChildWidgetsTo = this->get_override( "cloneChildWidgetsTo" ) )
            func_cloneChildWidgetsTo( boost::ref(target) );
        else{
            this->CEGUI::Window::cloneChildWidgetsTo( boost::ref(target) );
        }
    }
    
    void default_cloneChildWidgetsTo( ::CEGUI::Window & target ) const  {
        CEGUI::Window::cloneChildWidgetsTo( boost::ref(target) );
    }

    virtual void clonePropertiesTo( ::CEGUI::Window & target ) const  {
        if( bp::override func_clonePropertiesTo = this->get_override( "clonePropertiesTo" ) )
            func_clonePropertiesTo( boost::ref(target) );
        else{
            this->CEGUI::Window::clonePropertiesTo( boost::ref(target) );
        }
    }
    
    void default_clonePropertiesTo( ::CEGUI::Window & target ) const  {
        CEGUI::Window::clonePropertiesTo( boost::ref(target) );
    }

    virtual void destroy(  ) {
        if( bp::override func_destroy = this->get_override( "destroy" ) )
            func_destroy(  );
        else{
            this->CEGUI::Window::destroy(  );
        }
    }
    
    void default_destroy(  ) {
        CEGUI::Window::destroy( );
    }

    virtual void endInitialisation(  ) {
        if( bp::override func_endInitialisation = this->get_override( "endInitialisation" ) )
            func_endInitialisation(  );
        else{
            this->CEGUI::Window::endInitialisation(  );
        }
    }
    
    void default_endInitialisation(  ) {
        CEGUI::Window::endInitialisation( );
    }

    virtual void fireEvent( ::CEGUI::String const & name, ::CEGUI::EventArgs & args, ::CEGUI::String const & eventNamespace="" ) {
        if( bp::override func_fireEvent = this->get_override( "fireEvent" ) )
            func_fireEvent( boost::ref(name), boost::ref(args), boost::ref(eventNamespace) );
        else{
            this->CEGUI::EventSet::fireEvent( boost::ref(name), boost::ref(args), boost::ref(eventNamespace) );
        }
    }
    
    void default_fireEvent( ::CEGUI::String const & name, ::CEGUI::EventArgs & args, ::CEGUI::String const & eventNamespace="" ) {
        CEGUI::EventSet::fireEvent( boost::ref(name), boost::ref(args), boost::ref(eventNamespace) );
    }

    virtual void getRenderingContext_impl( ::CEGUI::RenderingContext & ctx ) const  {
        if( bp::override func_getRenderingContext_impl = this->get_override( "getRenderingContext_impl" ) )
            func_getRenderingContext_impl( boost::ref(ctx) );
        else{
            this->CEGUI::Window::getRenderingContext_impl( boost::ref(ctx) );
        }
    }
    
    void default_getRenderingContext_impl( ::CEGUI::RenderingContext & ctx ) const  {
        CEGUI::Window::getRenderingContext_impl( boost::ref(ctx) );
    }

    virtual ::CEGUI::Rect getUnclippedInnerRect_impl(  ) const  {
        if( bp::override func_getUnclippedInnerRect_impl = this->get_override( "getUnclippedInnerRect_impl" ) )
            return func_getUnclippedInnerRect_impl(  );
        else{
            return this->CEGUI::Window::getUnclippedInnerRect_impl(  );
        }
    }
    
    ::CEGUI::Rect default_getUnclippedInnerRect_impl(  ) const  {
        return CEGUI::Window::getUnclippedInnerRect_impl( );
    }

    virtual void performChildWindowLayout(  ) {
        if( bp::override func_performChildWindowLayout = this->get_override( "performChildWindowLayout" ) )
            func_performChildWindowLayout(  );
        else{
            this->CEGUI::Window::performChildWindowLayout(  );
        }
    }
    
    void default_performChildWindowLayout(  ) {
        CEGUI::Window::performChildWindowLayout( );
    }

    virtual void setLookNFeel( ::CEGUI::String const & look ) {
        if( bp::override func_setLookNFeel = this->get_override( "setLookNFeel" ) )
            func_setLookNFeel( boost::ref(look) );
        else{
            this->CEGUI::Window::setLookNFeel( boost::ref(look) );
        }
    }
    
    void default_setLookNFeel( ::CEGUI::String const & look ) {
        CEGUI::Window::setLookNFeel( boost::ref(look) );
    }

    virtual void setMargin( ::CEGUI::UBox const & margin ) {
        if( bp::override func_setMargin = this->get_override( "setMargin" ) )
            func_setMargin( boost::ref(margin) );
        else{
            this->CEGUI::Window::setMargin( boost::ref(margin) );
        }
    }
    
    void default_setMargin( ::CEGUI::UBox const & margin ) {
        CEGUI::Window::setMargin( boost::ref(margin) );
    }

    virtual ::CEGUI::RefCounted< CEGUI::BoundSlot > subscribeScriptedEvent( ::CEGUI::String const & name, ::CEGUI::String const & subscriber_name ) {
        if( bp::override func_subscribeScriptedEvent = this->get_override( "subscribeScriptedEvent" ) )
            return func_subscribeScriptedEvent( boost::ref(name), boost::ref(subscriber_name) );
        else{
            return this->CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), boost::ref(subscriber_name) );
        }
    }
    
    ::CEGUI::RefCounted< CEGUI::BoundSlot > default_subscribeScriptedEvent( ::CEGUI::String const & name, ::CEGUI::String const & subscriber_name ) {
        return CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), boost::ref(subscriber_name) );
    }

    virtual ::CEGUI::RefCounted< CEGUI::BoundSlot > subscribeScriptedEvent( ::CEGUI::String const & name, unsigned int group, ::CEGUI::String const & subscriber_name ) {
        if( bp::override func_subscribeScriptedEvent = this->get_override( "subscribeScriptedEvent" ) )
            return func_subscribeScriptedEvent( boost::ref(name), group, boost::ref(subscriber_name) );
        else{
            return this->CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), group, boost::ref(subscriber_name) );
        }
    }
    
    ::CEGUI::RefCounted< CEGUI::BoundSlot > default_subscribeScriptedEvent( ::CEGUI::String const & name, unsigned int group, ::CEGUI::String const & subscriber_name ) {
        return CEGUI::EventSet::subscribeScriptedEvent( boost::ref(name), group, boost::ref(subscriber_name) );
    }

    virtual void update( float elapsed ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update( elapsed );
        else{
            this->CEGUI::Window::update( elapsed );
        }
    }
    
    void default_update( float elapsed ) {
        CEGUI::Window::update( elapsed );
    }

    virtual void writeXMLToStream( ::CEGUI::XMLSerializer & xml_stream ) const  {
        if( bp::override func_writeXMLToStream = this->get_override( "writeXMLToStream" ) )
            func_writeXMLToStream( boost::ref(xml_stream) );
        else{
            this->CEGUI::Window::writeXMLToStream( boost::ref(xml_stream) );
        }
    }
    
    void default_writeXMLToStream( ::CEGUI::XMLSerializer & xml_stream ) const  {
        CEGUI::Window::writeXMLToStream( boost::ref(xml_stream) );
    }

};

void register_Combobox_class(){

    { //::CEGUI::Combobox
        typedef bp::class_< Combobox_wrapper, bp::bases< CEGUI::Window >, boost::noncopyable > Combobox_exposer_t;
        Combobox_exposer_t Combobox_exposer = Combobox_exposer_t( "Combobox", "*!\n\
        \n\
           Base class for the Combobox widget\n\
        *\n", bp::init< CEGUI::String const &, CEGUI::String const & >(( bp::arg("type"), bp::arg("name") ), "*************************************************************************\n\
           Construction and Destruction\n\
        *************************************************************************\n\
        *!\n\
        \n\
           Constructor for Combobox base class\n\
        *\n") );
        bp::scope Combobox_scope( Combobox_exposer );
        { //::CEGUI::Combobox::activateEditbox
        
            typedef void ( ::CEGUI::Combobox::*activateEditbox_function_type )(  ) ;
            
            Combobox_exposer.def( 
                "activateEditbox"
                , activateEditbox_function_type( &::CEGUI::Combobox::activateEditbox )
                , "*!\n\
               \n\
                  Activate the edit box component of the Combobox.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::addItem
        
            typedef void ( ::CEGUI::Combobox::*addItem_function_type )( ::CEGUI::ListboxItem * ) ;
            
            Combobox_exposer.def( 
                "addItem"
                , addItem_function_type( &::CEGUI::Combobox::addItem )
                , ( bp::arg("item") )
                , "*!\n\
               \n\
                  Add the given ListboxItem to the list.\n\
            \n\
               @param item\n\
                  Pointer to the ListboxItem to be added to the list.  Note that it is the passed object that is\
                  added to the\n\
                  list, a copy is not made.  If this parameter is NULL, nothing happens.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::clearAllSelections
        
            typedef void ( ::CEGUI::Combobox::*clearAllSelections_function_type )(  ) ;
            
            Combobox_exposer.def( 
                "clearAllSelections"
                , clearAllSelections_function_type( &::CEGUI::Combobox::clearAllSelections )
                , "*!\n\
               \n\
                  Clear the selected state for all items.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::findItemWithText
        
            typedef ::CEGUI::ListboxItem * ( ::CEGUI::Combobox::*findItemWithText_function_type )( ::CEGUI::String const &,::CEGUI::ListboxItem const * ) ;
            
            Combobox_exposer.def( 
                "findItemWithText"
                , findItemWithText_function_type( &::CEGUI::Combobox::findItemWithText )
                , ( bp::arg("text"), bp::arg("start_item") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
               \n\
                  Search the list for an item with the specified text\n\
            \n\
               @param text\n\
                  String object containing the text to be searched for.\n\
            \n\
               @param start_item\n\
                  ListboxItem where the search is to begin, the search will not include  item.  If  item is\n\
                  NULL, the search will begin from the first item in the list.\n\
            \n\
               @return\n\
                  Pointer to the first ListboxItem in the list after  item that has text matching  text.  If\n\
                  no item matches the criteria NULL is returned.\n\
            \n\
               @exception  InvalidRequestException thrown if  item is not attached to this list box.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::getCaratIndex
        
            typedef ::size_t ( ::CEGUI::Combobox::*getCaratIndex_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "getCaratIndex"
                , getCaratIndex_function_type( &::CEGUI::Combobox::getCaratIndex )
                , "*!\n\
               \n\
                  return the current position of the carat.\n\
            \n\
               @return\n\
                  Index of the insert carat relative to the start of the text.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::getDropList
        
            typedef ::CEGUI::ComboDropList * ( ::CEGUI::Combobox::*getDropList_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "getDropList"
                , getDropList_function_type( &::CEGUI::Combobox::getDropList )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Return a pointer to the ComboDropList component widget for this\n\
                    Combobox.\n\
            \n\
                @return\n\
                    Pointer to an ComboDropList object.\n\
            \n\
                @exception UnknownObjectException\n\
                    Thrown if the ComboDropList component does not exist.\n\
                *\n" );
        
        }
        { //::CEGUI::Combobox::getEditbox
        
            typedef ::CEGUI::Editbox * ( ::CEGUI::Combobox::*getEditbox_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "getEditbox"
                , getEditbox_function_type( &::CEGUI::Combobox::getEditbox )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Return a pointer to the Editbox component widget for this Combobox.\n\
            \n\
                @return\n\
                    Pointer to an Editbox object.\n\
            \n\
                @exception UnknownObjectException\n\
                    Thrown if the Editbox component does not exist.\n\
                *\n" );
        
        }
        { //::CEGUI::Combobox::getItemCount
        
            typedef ::size_t ( ::CEGUI::Combobox::*getItemCount_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "getItemCount"
                , getItemCount_function_type( &::CEGUI::Combobox::getItemCount )
                , "*************************************************************************\n\
                  List Accessors\n\
               *************************************************************************\n\
               *!\n\
               \n\
                  Return number of items attached to the list box\n\
            \n\
               @return\n\
                  the number of items currently attached to this list box.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::getItemIndex
        
            typedef ::size_t ( ::CEGUI::Combobox::*getItemIndex_function_type )( ::CEGUI::ListboxItem const * ) const;
            
            Combobox_exposer.def( 
                "getItemIndex"
                , getItemIndex_function_type( &::CEGUI::Combobox::getItemIndex )
                , ( bp::arg("item") )
                , "*!\n\
               \n\
                  Return the index of ListboxItem  item\n\
            \n\
               @param item\n\
                  Pointer to a ListboxItem whos zero based index is to be returned.\n\
            \n\
               @return\n\
                  Zero based index indicating the position of ListboxItem  item in the list box.\n\
            \n\
               @exception  InvalidRequestException thrown if  item is not attached to this list box.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::getListboxItemFromIndex
        
            typedef ::CEGUI::ListboxItem * ( ::CEGUI::Combobox::*getListboxItemFromIndex_function_type )( ::size_t ) const;
            
            Combobox_exposer.def( 
                "getListboxItemFromIndex"
                , getListboxItemFromIndex_function_type( &::CEGUI::Combobox::getListboxItemFromIndex )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
               \n\
                  Return the item at index position  index.\n\
            \n\
               @param index\n\
                  Zero based index of the item to be returned.\n\
            \n\
               @return\n\
                  Pointer to the ListboxItem at index position  index in the list box.\n\
            \n\
               @exception  InvalidRequestException thrown if  index is out of range.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::getMaxTextLength
        
            typedef ::size_t ( ::CEGUI::Combobox::*getMaxTextLength_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "getMaxTextLength"
                , getMaxTextLength_function_type( &::CEGUI::Combobox::getMaxTextLength )
                , "*!\n\
               \n\
                  return the maximum text length set for this Editbox.\n\
            \n\
               @return\n\
                  The maximum number of code points (characters) that can be entered into this Editbox.\n\
            \n\
               \note\n\
                  Depending on the validation string set, the actual length of text that can be entered may be\
                  less than the value\n\
                  returned here (it will never be more).\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::getPushButton
        
            typedef ::CEGUI::PushButton * ( ::CEGUI::Combobox::*getPushButton_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "getPushButton"
                , getPushButton_function_type( &::CEGUI::Combobox::getPushButton )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
                \n\
                    Return a pointer to the PushButton component widget for this Combobox.\n\
            \n\
                @return\n\
                    Pointer to a PushButton object.\n\
            \n\
                @exception UnknownObjectException\n\
                    Thrown if the PushButton component does not exist.\n\
                *\n" );
        
        }
        { //::CEGUI::Combobox::getSelectedItem
        
            typedef ::CEGUI::ListboxItem * ( ::CEGUI::Combobox::*getSelectedItem_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "getSelectedItem"
                , getSelectedItem_function_type( &::CEGUI::Combobox::getSelectedItem )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "*!\n\
               \n\
                  Return a pointer to the currently selected item.\n\
            \n\
               @return\n\
                  Pointer to a ListboxItem based object that is the selected item in the list.  will return NULL\
                  if\n\
                  no item is selected.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::getSelectionEndIndex
        
            typedef ::size_t ( ::CEGUI::Combobox::*getSelectionEndIndex_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "getSelectionEndIndex"
                , getSelectionEndIndex_function_type( &::CEGUI::Combobox::getSelectionEndIndex )
                , "*!\n\
               \n\
                  return the current selection end point.\n\
            \n\
               @return\n\
                  Index of the selection end point relative to the start of the text.  If no selection is\
                  defined this function returns\n\
                  the position of the carat.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::getSelectionLength
        
            typedef ::size_t ( ::CEGUI::Combobox::*getSelectionLength_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "getSelectionLength"
                , getSelectionLength_function_type( &::CEGUI::Combobox::getSelectionLength )
                , "*!\n\
               \n\
                  return the length of the current selection (in code points  characters).\n\
            \n\
               @return\n\
                  Number of code points (or characters) contained within the currently defined selection.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::getSelectionStartIndex
        
            typedef ::size_t ( ::CEGUI::Combobox::*getSelectionStartIndex_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "getSelectionStartIndex"
                , getSelectionStartIndex_function_type( &::CEGUI::Combobox::getSelectionStartIndex )
                , "*!\n\
               \n\
                  return the current selection start point.\n\
            \n\
               @return\n\
                  Index of the selection start point relative to the start of the text.  If no selection is\
                  defined this function returns\n\
                  the position of the carat.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::getSingleClickEnabled
        
            typedef bool ( ::CEGUI::Combobox::*getSingleClickEnabled_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "getSingleClickEnabled"
                , getSingleClickEnabled_function_type( &::CEGUI::Combobox::getSingleClickEnabled )
                , "*!\n\
               \n\
                  returns the mode of operation for the combo box.\n\
            \n\
               @return\n\
                  - true if the user can show the list and select an item with a single mouse click.\n\
                  - false if the user must click to show the list and then click again to select an item.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::getValidationString
        
            typedef ::CEGUI::String const & ( ::CEGUI::Combobox::*getValidationString_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "getValidationString"
                , getValidationString_function_type( &::CEGUI::Combobox::getValidationString )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "*!\n\
               \n\
                  return the currently set validation string\n\
            \n\
               \note\n\
                  Validation is performed by means of a regular expression.  If the text matches the regex, the\
                  text is said to have passed\n\
                  validation.  If the text does not match with the regex then the text fails validation.\n\
            \n\
               @return\n\
                  String object containing the current validation regex data\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::handleUpdatedListItemData
        
            typedef void ( ::CEGUI::Combobox::*handleUpdatedListItemData_function_type )(  ) ;
            
            Combobox_exposer.def( 
                "handleUpdatedListItemData"
                , handleUpdatedListItemData_function_type( &::CEGUI::Combobox::handleUpdatedListItemData )
                , "*!\n\
               \n\
                  Causes the list box to update it's internal state after changes have been made to one or\
                  more\n\
                  attached ListboxItem objects.\n\
            \n\
                  Client code must call this whenever it has made any changes to ListboxItem objects already\
                  attached to the\n\
                  list box.  If you are just adding items, or removed items to update them prior to re-adding\
                  them, there is\n\
                  no need to call this method.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::hasInputFocus
        
            typedef bool ( ::CEGUI::Combobox::*hasInputFocus_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "hasInputFocus"
                , hasInputFocus_function_type( &::CEGUI::Combobox::hasInputFocus )
                , "*************************************************************************\n\
                  Editbox Accessors\n\
               *************************************************************************\n\
               *!\n\
               \n\
                  return true if the Editbox has input focus.\n\
            \n\
               @return\n\
                  true if the Editbox has keyboard input focus, false if the Editbox does not have keyboard\
                  input focus.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::hideDropList
        
            typedef void ( ::CEGUI::Combobox::*hideDropList_function_type )(  ) ;
            
            Combobox_exposer.def( 
                "hideDropList"
                , hideDropList_function_type( &::CEGUI::Combobox::hideDropList )
                , "*!\n\
               \n\
                  Hide the drop-down list\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::initialiseComponents
        
            typedef void ( ::CEGUI::Combobox::*initialiseComponents_function_type )(  ) ;
            typedef void ( Combobox_wrapper::*default_initialiseComponents_function_type )(  ) ;
            
            Combobox_exposer.def( 
                "initialiseComponents"
                , initialiseComponents_function_type(&::CEGUI::Combobox::initialiseComponents)
                , default_initialiseComponents_function_type(&Combobox_wrapper::default_initialiseComponents) );
        
        }
        { //::CEGUI::Combobox::insertItem
        
            typedef void ( ::CEGUI::Combobox::*insertItem_function_type )( ::CEGUI::ListboxItem *,::CEGUI::ListboxItem const * ) ;
            
            Combobox_exposer.def( 
                "insertItem"
                , insertItem_function_type( &::CEGUI::Combobox::insertItem )
                , ( bp::arg("item"), bp::arg("position") )
                , "*!\n\
               \n\
                  Insert an item into the list box after a specified item already in the list.\n\
            \n\
                  Note that if the list is sorted, the item may not end up in the requested position.\n\
            \n\
               @param item\n\
                  Pointer to the ListboxItem to be inserted.  Note that it is the passed object that is added to\
                  the\n\
                  list, a copy is not made.  If this parameter is NULL, nothing happens.\n\
            \n\
               @param position\n\
                  Pointer to a ListboxItem that  item is to be inserted after.  If this parameter is NULL, the\
                  item is\n\
                  inserted at the start of the list.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::isDropDownListVisible
        
            typedef bool ( ::CEGUI::Combobox::*isDropDownListVisible_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "isDropDownListVisible"
                , isDropDownListVisible_function_type( &::CEGUI::Combobox::isDropDownListVisible )
                , "*!\n\
               \n\
                  returns true if the drop down list is visible.\n\
            \n\
               @return\n\
                  true if the drop down list is visible, false otherwise.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::isHit
        
            typedef bool ( ::CEGUI::Combobox::*isHit_function_type )( ::CEGUI::Vector2 const &,bool const ) const;
            typedef bool ( Combobox_wrapper::*default_isHit_function_type )( ::CEGUI::Vector2 const &,bool const ) const;
            
            Combobox_exposer.def( 
                "isHit"
                , isHit_function_type(&::CEGUI::Combobox::isHit)
                , default_isHit_function_type(&Combobox_wrapper::default_isHit)
                , ( bp::arg("position"), bp::arg("allow_disabled")=(bool const)(false) ) );
        
        }
        { //::CEGUI::Combobox::isHorzScrollbarAlwaysShown
        
            typedef bool ( ::CEGUI::Combobox::*isHorzScrollbarAlwaysShown_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "isHorzScrollbarAlwaysShown"
                , isHorzScrollbarAlwaysShown_function_type( &::CEGUI::Combobox::isHorzScrollbarAlwaysShown )
                , "*!\n\
               \n\
                  Return whether the horizontal scroll bar is always shown.\n\
            \n\
               @return\n\
                  - true if the scroll bar will always be shown even if it is not required.\n\
                  - false if the scroll bar will only be shown when it is required.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::isItemSelected
        
            typedef bool ( ::CEGUI::Combobox::*isItemSelected_function_type )( ::size_t ) const;
            
            Combobox_exposer.def( 
                "isItemSelected"
                , isItemSelected_function_type( &::CEGUI::Combobox::isItemSelected )
                , ( bp::arg("index") )
                , "*!\n\
               \n\
                  return whether the string at index position  index is selected\n\
            \n\
               @param index\n\
                  Zero based index of the item to be examined.\n\
            \n\
               @return\n\
                  true if the item at  index is selected, false if the item at  index is not selected.\n\
            \n\
               @exception  InvalidRequestException thrown if  index is out of range.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::isListboxItemInList
        
            typedef bool ( ::CEGUI::Combobox::*isListboxItemInList_function_type )( ::CEGUI::ListboxItem const * ) const;
            
            Combobox_exposer.def( 
                "isListboxItemInList"
                , isListboxItemInList_function_type( &::CEGUI::Combobox::isListboxItemInList )
                , ( bp::arg("item") )
                , "*!\n\
               \n\
                  Return whether the specified ListboxItem is in the List\n\
            \n\
               @return\n\
                  true if ListboxItem  item is in the list, false if ListboxItem  item is not in the list.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::isReadOnly
        
            typedef bool ( ::CEGUI::Combobox::*isReadOnly_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "isReadOnly"
                , isReadOnly_function_type( &::CEGUI::Combobox::isReadOnly )
                , "*!\n\
               \n\
                  return true if the Editbox is read-only.\n\
            \n\
               @return\n\
                  true if the Editbox is read only and can't be edited by the user, false if the Editbox is\
                  not\n\
                  read only and may be edited by the user.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::isSortEnabled
        
            typedef bool ( ::CEGUI::Combobox::*isSortEnabled_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "isSortEnabled"
                , isSortEnabled_function_type( &::CEGUI::Combobox::isSortEnabled )
                , "*!\n\
               \n\
                  return whether list sorting is enabled\n\
            \n\
               @return\n\
                  true if the list is sorted, false if the list is not sorted\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::isTextValid
        
            typedef bool ( ::CEGUI::Combobox::*isTextValid_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "isTextValid"
                , isTextValid_function_type( &::CEGUI::Combobox::isTextValid )
                , "*!\n\
               \n\
                  return true if the Editbox text is valid given the currently set validation string.\n\
            \n\
               \note\n\
                  It is possible to programmatically set 'invalid' text for the Editbox by calling setText.\
                  This has certain\n\
                  implications since if invalid text is set, whatever the user types into the box will be\
                  rejected when the input\n\
                  is validated.\n\
            \n\
               \note\n\
                  Validation is performed by means of a regular expression.  If the text matches the regex, the\
                  text is said to have passed\n\
                  validation.  If the text does not match with the regex then the text fails validation.\n\
            \n\
               @return\n\
                  true if the current Editbox text passes validation, false if the text does not pass\
                  validation.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::isVertScrollbarAlwaysShown
        
            typedef bool ( ::CEGUI::Combobox::*isVertScrollbarAlwaysShown_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "isVertScrollbarAlwaysShown"
                , isVertScrollbarAlwaysShown_function_type( &::CEGUI::Combobox::isVertScrollbarAlwaysShown )
                , "*!\n\
               \n\
                  Return whether the vertical scroll bar is always shown.\n\
            \n\
               @return\n\
                  - true if the scroll bar will always be shown even if it is not required.\n\
                  - false if the scroll bar will only be shown when it is required.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::removeItem
        
            typedef void ( ::CEGUI::Combobox::*removeItem_function_type )( ::CEGUI::ListboxItem const * ) ;
            
            Combobox_exposer.def( 
                "removeItem"
                , removeItem_function_type( &::CEGUI::Combobox::removeItem )
                , ( bp::arg("item") )
                , "*!\n\
               \n\
                  Removes the given item from the list box.\n\
            \n\
               @param item\n\
                  Pointer to the ListboxItem that is to be removed.  If  item is not attached to this list box\
                  then nothing\n\
                  will happen.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::resetList
        
            typedef void ( ::CEGUI::Combobox::*resetList_function_type )(  ) ;
            
            Combobox_exposer.def( 
                "resetList"
                , resetList_function_type( &::CEGUI::Combobox::resetList )
                , "*************************************************************************\n\
                  List Manipulators\n\
               *************************************************************************\n\
               *!\n\
               \n\
                  Remove all items from the list.\n\
            \n\
                  Note that this will cause 'AutoDelete' items to be deleted.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::setCaratIndex
        
            typedef void ( ::CEGUI::Combobox::*setCaratIndex_function_type )( ::size_t ) ;
            
            Combobox_exposer.def( 
                "setCaratIndex"
                , setCaratIndex_function_type( &::CEGUI::Combobox::setCaratIndex )
                , ( bp::arg("carat_pos") )
                , "*!\n\
               \n\
                  Set the current position of the carat.\n\
            \n\
               @param carat_pos\n\
                  New index for the insert carat relative to the start of the text.  If the value specified is\
                  greater than the\n\
                  number of characters in the Editbox, the carat is positioned at the end of the text.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::setItemSelectState
        
            typedef void ( ::CEGUI::Combobox::*setItemSelectState_function_type )( ::CEGUI::ListboxItem *,bool ) ;
            
            Combobox_exposer.def( 
                "setItemSelectState"
                , setItemSelectState_function_type( &::CEGUI::Combobox::setItemSelectState )
                , ( bp::arg("item"), bp::arg("state") )
                , "*!\n\
               \n\
                  Set the select state of an attached ListboxItem.\n\
            \n\
                  This is the recommended way of selecting and deselecting items attached to a list box as it\
                  respects the\n\
                  multi-select mode setting.  It is possible to modify the setting on ListboxItems directly, but\
                  that approach\n\
                  does not respect the settings of the list box.\n\
            \n\
               @param item\n\
                  The ListboxItem to be affected.  This item must be attached to the list box.\n\
            \n\
               @param state\n\
                  true to select the item, false to de-select the item.\n\
            \n\
               @return\n\
                  Nothing.\n\
               \n\
               @exception  InvalidRequestException thrown if  item is not attached to this list box.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::setItemSelectState
        
            typedef void ( ::CEGUI::Combobox::*setItemSelectState_function_type )( ::size_t,bool ) ;
            
            Combobox_exposer.def( 
                "setItemSelectState"
                , setItemSelectState_function_type( &::CEGUI::Combobox::setItemSelectState )
                , ( bp::arg("item_index"), bp::arg("state") )
                , "*!\n\
               \n\
                  Set the select state of an attached ListboxItem.\n\
            \n\
                  This is the recommended way of selecting and deselecting items attached to a list box as it\
                  respects the\n\
                  multi-select mode setting.  It is possible to modify the setting on ListboxItems directly, but\
                  that approach\n\
                  does not respect the settings of the list box.\n\
            \n\
               @param item_index\n\
                  The zero based index of the ListboxItem to be affected.  This must be a valid index (0 <=\
                  index < getItemCount())\n\
            \n\
               @param state\n\
                  true to select the item, false to de-select the item.\n\
            \n\
               @return\n\
                  Nothing.\n\
               \n\
               @exception  InvalidRequestException thrown if  item_index is out of range for the list box\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::setMaxTextLength
        
            typedef void ( ::CEGUI::Combobox::*setMaxTextLength_function_type )( ::size_t ) ;
            
            Combobox_exposer.def( 
                "setMaxTextLength"
                , setMaxTextLength_function_type( &::CEGUI::Combobox::setMaxTextLength )
                , ( bp::arg("max_len") )
                , "*!\n\
               \n\
                  set the maximum text length for this Editbox.\n\
            \n\
               @param max_len\n\
                  The maximum number of code points (characters) that can be entered into this Editbox.\n\
            \n\
               \note\n\
                  Depending on the validation string set, the actual length of text that can be entered may be\
                  less than the value\n\
                  set here (it will never be more).\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::setReadOnly
        
            typedef void ( ::CEGUI::Combobox::*setReadOnly_function_type )( bool ) ;
            
            Combobox_exposer.def( 
                "setReadOnly"
                , setReadOnly_function_type( &::CEGUI::Combobox::setReadOnly )
                , ( bp::arg("setting") )
                , "*************************************************************************\n\
                  Editbox Manipulators\n\
               *************************************************************************\n\
               *!\n\
               \n\
                  Specify whether the Editbox is read-only.\n\
            \n\
               @param setting\n\
                  true if the Editbox is read only and can't be edited by the user, false if the Editbox is\
                  not\n\
                  read only and may be edited by the user.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::setSelection
        
            typedef void ( ::CEGUI::Combobox::*setSelection_function_type )( ::size_t,::size_t ) ;
            
            Combobox_exposer.def( 
                "setSelection"
                , setSelection_function_type( &::CEGUI::Combobox::setSelection )
                , ( bp::arg("start_pos"), bp::arg("end_pos") )
                , "*!\n\
               \n\
                  Define the current selection for the Editbox\n\
            \n\
               @param start_pos\n\
                  Index of the starting point for the selection.  If this value is greater than the number of\
                  characters in the Editbox, the\n\
                  selection start will be set to the end of the text.\n\
            \n\
               @param end_pos\n\
                  Index of the ending point for the selection.  If this value is greater than the number of\
                  characters in the Editbox, the\n\
                  selection start will be set to the end of the text.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::setShowHorzScrollbar
        
            typedef void ( ::CEGUI::Combobox::*setShowHorzScrollbar_function_type )( bool ) ;
            
            Combobox_exposer.def( 
                "setShowHorzScrollbar"
                , setShowHorzScrollbar_function_type( &::CEGUI::Combobox::setShowHorzScrollbar )
                , ( bp::arg("setting") )
                , "*!\n\
               \n\
                  Set whether the horizontal scroll bar should always be shown.\n\
            \n\
               @param setting\n\
                  true if the horizontal scroll bar should be shown even when it is not required.  false if the\
                  horizontal\n\
                  scroll bar should only be shown when it is required.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::setShowVertScrollbar
        
            typedef void ( ::CEGUI::Combobox::*setShowVertScrollbar_function_type )( bool ) ;
            
            Combobox_exposer.def( 
                "setShowVertScrollbar"
                , setShowVertScrollbar_function_type( &::CEGUI::Combobox::setShowVertScrollbar )
                , ( bp::arg("setting") )
                , "*!\n\
               \n\
                  Set whether the vertical scroll bar should always be shown.\n\
            \n\
               @param setting\n\
                  true if the vertical scroll bar should be shown even when it is not required.  false if the\
                  vertical\n\
                  scroll bar should only be shown when it is required.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::setSingleClickEnabled
        
            typedef void ( ::CEGUI::Combobox::*setSingleClickEnabled_function_type )( bool ) ;
            
            Combobox_exposer.def( 
                "setSingleClickEnabled"
                , setSingleClickEnabled_function_type( &::CEGUI::Combobox::setSingleClickEnabled )
                , ( bp::arg("setting") )
                , "*!\n\
               \n\
                  Set the mode of operation for the combo box.\n\
            \n\
               @param setting\n\
                  - true if the user should be able to show the list and select an item with a single mouse\
                  click.\n\
                  - false if the user must click to show the list and then click again to select an item.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::setSortingEnabled
        
            typedef void ( ::CEGUI::Combobox::*setSortingEnabled_function_type )( bool ) ;
            
            Combobox_exposer.def( 
                "setSortingEnabled"
                , setSortingEnabled_function_type( &::CEGUI::Combobox::setSortingEnabled )
                , ( bp::arg("setting") )
                , "*!\n\
               \n\
                  Set whether the list should be sorted.\n\
            \n\
               @param setting\n\
                  true if the list should be sorted, false if the list should not be sorted.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::setValidationString
        
            typedef void ( ::CEGUI::Combobox::*setValidationString_function_type )( ::CEGUI::String const & ) ;
            
            Combobox_exposer.def( 
                "setValidationString"
                , setValidationString_function_type( &::CEGUI::Combobox::setValidationString )
                , ( bp::arg("validation_string") )
                , "*!\n\
               \n\
                  Set the text validation string.\n\
            \n\
               \note\n\
                  Validation is performed by means of a regular expression.  If the text matches the regex, the\
                  text is said to have passed\n\
                  validation.  If the text does not match with the regex then the text fails validation.\n\
            \n\
               @param validation_string\n\
                  String object containing the validation regex data to be used.\n\
            \n\
               @return\n\
                  Nothing.\n\
               *\n" );
        
        }
        { //::CEGUI::Combobox::showDropList
        
            typedef void ( ::CEGUI::Combobox::*showDropList_function_type )(  ) ;
            
            Combobox_exposer.def( 
                "showDropList"
                , showDropList_function_type( &::CEGUI::Combobox::showDropList )
                , "*!\n\
               \n\
                  Show the drop-down list\n\
            \n\
               @return\n\
                  Nothing\n\
               *\n" );
        
        }
        Combobox_exposer.add_static_property( "ButtonNameSuffix"
                        , bp::make_getter( &CEGUI::Combobox::ButtonNameSuffix
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "DropListNameSuffix"
                        , bp::make_getter( &CEGUI::Combobox::DropListNameSuffix
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EditboxNameSuffix"
                        , bp::make_getter( &CEGUI::Combobox::EditboxNameSuffix
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventCaratMoved"
                        , bp::make_getter( &CEGUI::Combobox::EventCaratMoved
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventDropListDisplayed"
                        , bp::make_getter( &CEGUI::Combobox::EventDropListDisplayed
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventDropListRemoved"
                        , bp::make_getter( &CEGUI::Combobox::EventDropListRemoved
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventEditboxFull"
                        , bp::make_getter( &CEGUI::Combobox::EventEditboxFull
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventHorzScrollbarModeChanged"
                        , bp::make_getter( &CEGUI::Combobox::EventHorzScrollbarModeChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventInvalidEntryAttempted"
                        , bp::make_getter( &CEGUI::Combobox::EventInvalidEntryAttempted
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventListContentsChanged"
                        , bp::make_getter( &CEGUI::Combobox::EventListContentsChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventListSelectionAccepted"
                        , bp::make_getter( &CEGUI::Combobox::EventListSelectionAccepted
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventListSelectionChanged"
                        , bp::make_getter( &CEGUI::Combobox::EventListSelectionChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventMaximumTextLengthChanged"
                        , bp::make_getter( &CEGUI::Combobox::EventMaximumTextLengthChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventReadOnlyModeChanged"
                        , bp::make_getter( &CEGUI::Combobox::EventReadOnlyModeChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventSortModeChanged"
                        , bp::make_getter( &CEGUI::Combobox::EventSortModeChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventTextAccepted"
                        , bp::make_getter( &CEGUI::Combobox::EventTextAccepted
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventTextInvalidated"
                        , bp::make_getter( &CEGUI::Combobox::EventTextInvalidated
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventTextSelectionChanged"
                        , bp::make_getter( &CEGUI::Combobox::EventTextSelectionChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventValidationStringChanged"
                        , bp::make_getter( &CEGUI::Combobox::EventValidationStringChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        Combobox_exposer.add_static_property( "EventVertScrollbarModeChanged"
                        , bp::make_getter( &CEGUI::Combobox::EventVertScrollbarModeChanged
                                , bp::return_value_policy< bp::return_by_value >() ) );
        { //::CEGUI::Window::beginInitialisation
        
            typedef void ( ::CEGUI::Window::*beginInitialisation_function_type )(  ) ;
            typedef void ( Combobox_wrapper::*default_beginInitialisation_function_type )(  ) ;
            
            Combobox_exposer.def( 
                "beginInitialisation"
                , beginInitialisation_function_type(&::CEGUI::Window::beginInitialisation)
                , default_beginInitialisation_function_type(&Combobox_wrapper::default_beginInitialisation) );
        
        }
        { //::CEGUI::Window::cloneChildWidgetsTo
        
            typedef void ( ::CEGUI::Window::*cloneChildWidgetsTo_function_type )( ::CEGUI::Window & ) const;
            typedef void ( Combobox_wrapper::*default_cloneChildWidgetsTo_function_type )( ::CEGUI::Window & ) const;
            
            Combobox_exposer.def( 
                "cloneChildWidgetsTo"
                , cloneChildWidgetsTo_function_type(&::CEGUI::Window::cloneChildWidgetsTo)
                , default_cloneChildWidgetsTo_function_type(&Combobox_wrapper::default_cloneChildWidgetsTo)
                , ( bp::arg("target") ) );
        
        }
        { //::CEGUI::Window::clonePropertiesTo
        
            typedef void ( ::CEGUI::Window::*clonePropertiesTo_function_type )( ::CEGUI::Window & ) const;
            typedef void ( Combobox_wrapper::*default_clonePropertiesTo_function_type )( ::CEGUI::Window & ) const;
            
            Combobox_exposer.def( 
                "clonePropertiesTo"
                , clonePropertiesTo_function_type(&::CEGUI::Window::clonePropertiesTo)
                , default_clonePropertiesTo_function_type(&Combobox_wrapper::default_clonePropertiesTo)
                , ( bp::arg("target") ) );
        
        }
        { //::CEGUI::Window::destroy
        
            typedef void ( ::CEGUI::Window::*destroy_function_type )(  ) ;
            typedef void ( Combobox_wrapper::*default_destroy_function_type )(  ) ;
            
            Combobox_exposer.def( 
                "destroy"
                , destroy_function_type(&::CEGUI::Window::destroy)
                , default_destroy_function_type(&Combobox_wrapper::default_destroy) );
        
        }
        { //::CEGUI::Window::endInitialisation
        
            typedef void ( ::CEGUI::Window::*endInitialisation_function_type )(  ) ;
            typedef void ( Combobox_wrapper::*default_endInitialisation_function_type )(  ) ;
            
            Combobox_exposer.def( 
                "endInitialisation"
                , endInitialisation_function_type(&::CEGUI::Window::endInitialisation)
                , default_endInitialisation_function_type(&Combobox_wrapper::default_endInitialisation) );
        
        }
        { //::CEGUI::EventSet::fireEvent
        
            typedef void ( ::CEGUI::EventSet::*fireEvent_function_type )( ::CEGUI::String const &,::CEGUI::EventArgs &,::CEGUI::String const & ) ;
            typedef void ( Combobox_wrapper::*default_fireEvent_function_type )( ::CEGUI::String const &,::CEGUI::EventArgs &,::CEGUI::String const & ) ;
            
            Combobox_exposer.def( 
                "fireEvent"
                , fireEvent_function_type(&::CEGUI::EventSet::fireEvent)
                , default_fireEvent_function_type(&Combobox_wrapper::default_fireEvent)
                , ( bp::arg("name"), bp::arg("args"), bp::arg("eventNamespace")="" ) );
        
        }
        { //::CEGUI::Window::getRenderedStringParser
        
            typedef ::CEGUI::RenderedStringParser & ( ::CEGUI::Window::*getRenderedStringParser_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "getRenderedStringParser"
                , getRenderedStringParser_function_type(&::CEGUI::Window::getRenderedStringParser)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CEGUI::Window::getRenderingContext_impl
        
            typedef void ( ::CEGUI::Window::*getRenderingContext_impl_function_type )( ::CEGUI::RenderingContext & ) const;
            typedef void ( Combobox_wrapper::*default_getRenderingContext_impl_function_type )( ::CEGUI::RenderingContext & ) const;
            
            Combobox_exposer.def( 
                "getRenderingContext_impl"
                , getRenderingContext_impl_function_type(&::CEGUI::Window::getRenderingContext_impl)
                , default_getRenderingContext_impl_function_type(&Combobox_wrapper::default_getRenderingContext_impl)
                , ( bp::arg("ctx") ) );
        
        }
        { //::CEGUI::Window::getUnclippedInnerRect_impl
        
            typedef ::CEGUI::Rect ( ::CEGUI::Window::*getUnclippedInnerRect_impl_function_type )(  ) const;
            typedef ::CEGUI::Rect ( Combobox_wrapper::*default_getUnclippedInnerRect_impl_function_type )(  ) const;
            
            Combobox_exposer.def( 
                "getUnclippedInnerRect_impl"
                , getUnclippedInnerRect_impl_function_type(&::CEGUI::Window::getUnclippedInnerRect_impl)
                , default_getUnclippedInnerRect_impl_function_type(&Combobox_wrapper::default_getUnclippedInnerRect_impl) );
        
        }
        { //::CEGUI::Window::performChildWindowLayout
        
            typedef void ( ::CEGUI::Window::*performChildWindowLayout_function_type )(  ) ;
            typedef void ( Combobox_wrapper::*default_performChildWindowLayout_function_type )(  ) ;
            
            Combobox_exposer.def( 
                "performChildWindowLayout"
                , performChildWindowLayout_function_type(&::CEGUI::Window::performChildWindowLayout)
                , default_performChildWindowLayout_function_type(&Combobox_wrapper::default_performChildWindowLayout) );
        
        }
        { //::CEGUI::Window::setLookNFeel
        
            typedef void ( ::CEGUI::Window::*setLookNFeel_function_type )( ::CEGUI::String const & ) ;
            typedef void ( Combobox_wrapper::*default_setLookNFeel_function_type )( ::CEGUI::String const & ) ;
            
            Combobox_exposer.def( 
                "setLookNFeel"
                , setLookNFeel_function_type(&::CEGUI::Window::setLookNFeel)
                , default_setLookNFeel_function_type(&Combobox_wrapper::default_setLookNFeel)
                , ( bp::arg("look") ) );
        
        }
        { //::CEGUI::Window::setMargin
        
            typedef void ( ::CEGUI::Window::*setMargin_function_type )( ::CEGUI::UBox const & ) ;
            typedef void ( Combobox_wrapper::*default_setMargin_function_type )( ::CEGUI::UBox const & ) ;
            
            Combobox_exposer.def( 
                "setMargin"
                , setMargin_function_type(&::CEGUI::Window::setMargin)
                , default_setMargin_function_type(&Combobox_wrapper::default_setMargin)
                , ( bp::arg("margin") ) );
        
        }
        { //::CEGUI::EventSet::subscribeScriptedEvent
        
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( ::CEGUI::EventSet::*subscribeScriptedEvent_function_type )( ::CEGUI::String const &,::CEGUI::String const & ) ;
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( Combobox_wrapper::*default_subscribeScriptedEvent_function_type )( ::CEGUI::String const &,::CEGUI::String const & ) ;
            
            Combobox_exposer.def( 
                "subscribeScriptedEvent"
                , subscribeScriptedEvent_function_type(&::CEGUI::EventSet::subscribeScriptedEvent)
                , default_subscribeScriptedEvent_function_type(&Combobox_wrapper::default_subscribeScriptedEvent)
                , ( bp::arg("name"), bp::arg("subscriber_name") ) );
        
        }
        { //::CEGUI::EventSet::subscribeScriptedEvent
        
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( ::CEGUI::EventSet::*subscribeScriptedEvent_function_type )( ::CEGUI::String const &,unsigned int,::CEGUI::String const & ) ;
            typedef ::CEGUI::RefCounted< CEGUI::BoundSlot > ( Combobox_wrapper::*default_subscribeScriptedEvent_function_type )( ::CEGUI::String const &,unsigned int,::CEGUI::String const & ) ;
            
            Combobox_exposer.def( 
                "subscribeScriptedEvent"
                , subscribeScriptedEvent_function_type(&::CEGUI::EventSet::subscribeScriptedEvent)
                , default_subscribeScriptedEvent_function_type(&Combobox_wrapper::default_subscribeScriptedEvent)
                , ( bp::arg("name"), bp::arg("group"), bp::arg("subscriber_name") ) );
        
        }
        { //::CEGUI::Window::update
        
            typedef void ( ::CEGUI::Window::*update_function_type )( float ) ;
            typedef void ( Combobox_wrapper::*default_update_function_type )( float ) ;
            
            Combobox_exposer.def( 
                "update"
                , update_function_type(&::CEGUI::Window::update)
                , default_update_function_type(&Combobox_wrapper::default_update)
                , ( bp::arg("elapsed") ) );
        
        }
        { //::CEGUI::Window::writeXMLToStream
        
            typedef void ( ::CEGUI::Window::*writeXMLToStream_function_type )( ::CEGUI::XMLSerializer & ) const;
            typedef void ( Combobox_wrapper::*default_writeXMLToStream_function_type )( ::CEGUI::XMLSerializer & ) const;
            
            Combobox_exposer.def( 
                "writeXMLToStream"
                , writeXMLToStream_function_type(&::CEGUI::Window::writeXMLToStream)
                , default_writeXMLToStream_function_type(&Combobox_wrapper::default_writeXMLToStream)
                , ( bp::arg("xml_stream") ) );
        
        }
    }

}
